DIGEST b081e6b1fd6a60e56c0e5f0e64657a64
FEquiv
R53:55 Imp <> <> lib
def 2306:2311 <> aequiv
R2322:2325 Imp <> aexp ind
R2351:2355 Imp <> state def
R2375:2377 Coq.Init.Logic <> :type_scope:x_'='_x not
R2364:2368 Imp <> aeval def
R2373:2374 Equiv <> a1 var
R2370:2371 Equiv <> st var
R2378:2382 Imp <> aeval def
R2387:2388 Equiv <> a2 var
R2384:2385 Equiv <> st var
def 2403:2408 <> bequiv
R2419:2422 Imp <> bexp ind
R2448:2452 Imp <> state def
R2472:2474 Coq.Init.Logic <> :type_scope:x_'='_x not
R2461:2465 Imp <> beval def
R2470:2471 Equiv <> b1 var
R2467:2468 Equiv <> st var
R2475:2479 Imp <> beval def
R2484:2485 Equiv <> b2 var
R2481:2482 Equiv <> st var
def 3148:3153 <> cequiv
R3164:3166 Imp <> com ind
R3198:3202 Imp <> state def
R3211:3211 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3226:3232 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3247:3247 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3214:3216 Imp <> ::x_'/'_x_'||'_x not
R3219:3222 Imp <> ::x_'/'_x_'||'_x not
R3212:3213 Equiv <> c1 var
R3217:3218 Equiv <> st var
R3223:3225 Equiv <> st' var
R3235:3237 Imp <> ::x_'/'_x_'||'_x not
R3240:3243 Imp <> ::x_'/'_x_'||'_x not
R3233:3234 Equiv <> c2 var
R3238:3239 Equiv <> st var
R3244:3246 Equiv <> st' var
prf 4269:4282 <> aequiv_example
R4287:4292 Equiv <> aequiv def
R4320:4323 Imp <> ANum constr
R4295:4300 Imp <> AMinus constr
R4311:4313 Imp <> AId constr
R4315:4315 Imp <> X def
R4303:4305 Imp <> AId constr
R4307:4307 Imp <> X def
R4362:4371 Coq.Arith.Minus <> minus_diag thm
R4362:4371 Coq.Arith.Minus <> minus_diag thm
prf 4390:4403 <> bequiv_example
R4408:4413 Equiv <> bequiv def
R4455:4459 Imp <> BTrue constr
R4416:4418 Imp <> BEq constr
R4446:4449 Imp <> ANum constr
R4421:4426 Imp <> AMinus constr
R4437:4439 Imp <> AId constr
R4441:4441 Imp <> X def
R4429:4431 Imp <> AId constr
R4433:4433 Imp <> X def
R4491:4495 Imp <> beval def
R4508:4521 Equiv <> aequiv_example thm
R4508:4521 Equiv <> aequiv_example thm
prf 4681:4689 <> skip_left
R4704:4709 Equiv <> cequiv def
R4733:4733 Equiv <> c var
R4722:4723 Imp <> ::x_';'_x not
R4718:4721 Imp <> ::'SKIP' not
R4724:4724 Equiv <> c var
R4911:4915 Imp <> E_Seq constr
R4911:4915 Imp <> E_Seq constr
R4936:4941 Imp <> E_Skip constr
R4936:4941 Imp <> E_Skip constr
prf 5106:5115 <> skip_right
R5130:5135 Equiv <> cequiv def
R5157:5157 Equiv <> c var
R5144:5145 Imp <> ::x_';'_x not
R5143:5143 Equiv <> c var
R5146:5149 Imp <> ::'SKIP' not
R5328:5332 Imp <> E_Seq constr
R5328:5332 Imp <> E_Seq constr
R5366:5371 Imp <> E_Skip constr
R5366:5371 Imp <> E_Skip constr
prf 5488:5502 <> IFB_true_simple
R5521:5526 Equiv <> cequiv def
R5569:5570 Equiv <> c1 var
R5534:5537 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5543:5548 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5551:5556 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5559:5561 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5538:5542 Imp <> BTrue constr
R5549:5550 Equiv <> c1 var
R5557:5558 Equiv <> c2 var
R5703:5710 Imp <> E_IfTrue constr
R5703:5710 Imp <> E_IfTrue constr
prf 7615:7622 <> IFB_true
R7670:7675 Equiv <> cequiv def
R7720:7721 Equiv <> c1 var
R7686:7689 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7691:7696 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7699:7704 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7707:7709 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7690:7690 Equiv <> b var
R7697:7698 Equiv <> c1 var
R7705:7706 Equiv <> c2 var
R7646:7651 Equiv <> bequiv def
R7655:7659 Imp <> BTrue constr
R7653:7653 Equiv <> b var
R7976:7983 Imp <> E_IfTrue constr
R7976:7983 Imp <> E_IfTrue constr
prf 8088:8096 <> IFB_false
R8139:8144 Equiv <> cequiv def
R8183:8184 Equiv <> c2 var
R8152:8155 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8157:8162 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8165:8170 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8173:8175 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8156:8156 Equiv <> b var
R8163:8164 Equiv <> c1 var
R8171:8172 Equiv <> c2 var
R8117:8122 Equiv <> bequiv def
R8126:8131 Imp <> BFalse constr
R8124:8124 Equiv <> b var
R8457:8465 Imp <> E_IfFalse constr
R8457:8465 Imp <> E_IfFalse constr
prf 8669:8684 <> swap_if_branches
R8705:8710 Equiv <> cequiv def
R8748:8751 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8758:8763 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8766:8771 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8774:8776 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8752:8755 Imp <> BNot constr
R8757:8757 Equiv <> b var
R8764:8765 Equiv <> e2 var
R8772:8773 Equiv <> e1 var
R8717:8720 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8722:8727 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8730:8735 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8738:8740 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8721:8721 Equiv <> b var
R8728:8729 Equiv <> e1 var
R8736:8737 Equiv <> e2 var
R8925:8933 Imp <> E_IfFalse constr
R8925:8933 Imp <> E_IfFalse constr
R9026:9033 Imp <> E_IfTrue constr
R9026:9033 Imp <> E_IfTrue constr
R9194:9201 Coq.Bool.Bool <> negb_sym thm
R9194:9201 Coq.Bool.Bool <> negb_sym thm
R9235:9243 Imp <> E_IfFalse constr
R9235:9243 Imp <> E_IfFalse constr
R9322:9329 Coq.Bool.Bool <> negb_sym thm
R9322:9329 Coq.Bool.Bool <> negb_sym thm
R9363:9370 Imp <> E_IfTrue constr
R9363:9370 Imp <> E_IfTrue constr
prf 9731:9741 <> WHILE_false
R9786:9791 Equiv <> cequiv def
R9826:9829 Imp <> ::'SKIP' not
R9801:9806 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9808:9811 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9813:9816 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9807:9807 Equiv <> b var
R9812:9812 Equiv <> c var
R9762:9767 Equiv <> bequiv def
R9771:9776 Imp <> BFalse constr
R9769:9769 Equiv <> b var
R9947:9952 Imp <> E_Skip constr
R9947:9952 Imp <> E_Skip constr
R10065:10074 Imp <> E_WhileEnd constr
R10065:10074 Imp <> E_WhileEnd constr
prf 12949:12966 <> WHILE_true_nonterm
R13017:13019 Coq.Init.Logic <> :type_scope:'~'_x not
R13050:13051 Coq.Init.Logic <> :type_scope:'~'_x not
R13020:13020 Imp <> ::x_'/'_x_'||'_x not
R13037:13040 Imp <> ::x_'/'_x_'||'_x not
R13043:13046 Imp <> ::x_'/'_x_'||'_x not
R13021:13026 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13028:13031 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13033:13036 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13027:13027 Equiv <> b var
R13032:13032 Equiv <> c var
R13041:13042 Equiv <> st var
R13047:13049 Equiv <> st' var
R12994:12999 Equiv <> bequiv def
R13003:13007 Imp <> BTrue constr
R13001:13001 Equiv <> b var
R13134:13139 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13141:13144 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13146:13149 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13134:13139 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13141:13144 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13146:13149 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13451:13456 Equiv <> bequiv def
prf 14440:14449 <> WHILE_true
R14493:14498 Equiv <> cequiv def
R14535:14540 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14546:14549 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14554:14557 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14541:14545 Imp <> BTrue constr
R14550:14553 Imp <> ::'SKIP' not
R14509:14514 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14516:14519 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14521:14524 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14515:14515 Equiv <> b var
R14520:14520 Equiv <> c var
R14469:14474 Equiv <> bequiv def
R14478:14482 Imp <> BTrue constr
R14476:14476 Equiv <> b var
R14646:14663 SfLib <> ex_falso_quodlibet thm
R14646:14663 SfLib <> ex_falso_quodlibet thm
R14676:14693 Equiv <> WHILE_true_nonterm thm
R14676:14693 Equiv <> WHILE_true_nonterm thm
R14747:14764 SfLib <> ex_falso_quodlibet thm
R14747:14764 SfLib <> ex_falso_quodlibet thm
R14801:14805 Imp <> BTrue constr
R14807:14810 Imp <> ::'SKIP' not
R14777:14794 Equiv <> WHILE_true_nonterm thm
R14801:14805 Imp <> BTrue constr
R14807:14810 Imp <> ::'SKIP' not
R14777:14794 Equiv <> WHILE_true_nonterm thm
R14831:14836 Equiv <> bequiv def
prf 14890:14903 <> loop_unrolling
R14920:14925 Equiv <> cequiv def
R14955:14958 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14960:14966 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14986:14992 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14997:14999 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14959:14959 Equiv <> b var
R14968:14969 Imp <> ::x_';'_x not
R14967:14967 Equiv <> c var
R14970:14975 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14977:14980 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14982:14985 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14976:14976 Equiv <> b var
R14981:14981 Equiv <> c var
R14993:14996 Imp <> ::'SKIP' not
R14932:14937 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14939:14942 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14944:14947 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14938:14938 Equiv <> b var
R14943:14943 Equiv <> c var
R15159:15167 Imp <> E_IfFalse constr
R15159:15167 Imp <> E_IfFalse constr
R15188:15193 Imp <> E_Skip constr
R15188:15193 Imp <> E_Skip constr
R15231:15238 Imp <> E_IfTrue constr
R15231:15238 Imp <> E_IfTrue constr
R15265:15269 Imp <> E_Seq constr
R15265:15269 Imp <> E_Seq constr
R15416:15426 Imp <> E_WhileLoop constr
R15416:15426 Imp <> E_WhileLoop constr
R15554:15563 Imp <> E_WhileEnd constr
R15554:15563 Imp <> E_WhileEnd constr
prf 15645:15653 <> seq_assoc
R15676:15681 Equiv <> cequiv def
R15699:15700 Imp <> ::x_';'_x not
R15706:15706 Imp <> ::x_';'_x not
R15697:15698 Equiv <> c1 var
R15703:15703 Imp <> ::x_';'_x not
R15701:15702 Equiv <> c2 var
R15704:15705 Equiv <> c3 var
R15684:15684 Imp <> ::x_';'_x not
R15690:15691 Imp <> ::x_';'_x not
R15687:15687 Imp <> ::x_';'_x not
R15685:15686 Equiv <> c1 var
R15688:15689 Equiv <> c2 var
R15692:15693 Equiv <> c3 var
R15852:15856 Imp <> E_Seq constr
R15852:15856 Imp <> E_Seq constr
R15904:15908 Imp <> E_Seq constr
R15904:15908 Imp <> E_Seq constr
R16016:16020 Imp <> E_Seq constr
R16016:16020 Imp <> E_Seq constr
R16068:16072 Imp <> E_Seq constr
R16068:16072 Imp <> E_Seq constr
prf 16427:16455 <> identity_assignment_first_try
R16469:16470 SfLib <> id ind
R16476:16481 Equiv <> cequiv def
R16497:16500 Imp <> ::'SKIP' not
R16485:16489 Imp <> ::x_'::='_x not
R16484:16484 Equiv <> X var
R16490:16492 Imp <> AId constr
R16494:16494 Equiv <> X var
R16606:16611 Imp <> update def
R16606:16611 Imp <> update def
ax 18631:18655 <> functional_extensionality
R18690:18690 Equiv <> Y var
R18685:18685 Equiv <> X var
R18730:18732 Coq.Init.Logic <> :type_scope:x_'='_x not
R18729:18729 Equiv <> f var
R18733:18733 Equiv <> g var
R18710:18710 Equiv <> X var
R18717:18719 Coq.Init.Logic <> :type_scope:x_'='_x not
R18714:18714 Equiv <> f var
R18716:18716 Equiv <> x var
R18720:18720 Equiv <> g var
R18722:18722 Equiv <> x var
prf 19016:19034 <> identity_assignment
R19048:19049 SfLib <> id ind
R19055:19060 Equiv <> cequiv def
R19084:19087 Imp <> ::'SKIP' not
R19068:19072 Imp <> ::x_'::='_x not
R19067:19067 Equiv <> X var
R19073:19075 Imp <> AId constr
R19077:19077 Equiv <> X var
R19192:19197 Imp <> update def
R19192:19197 Imp <> update def
R19257:19281 Equiv <> functional_extensionality prfax
R19257:19281 Equiv <> functional_extensionality prfax
R19307:19317 Imp <> update_same thm
R19307:19317 Imp <> update_same thm
R19397:19400 Coq.Init.Logic <> :type_scope:x_'='_x not
R19421:19421 Coq.Init.Logic <> :type_scope:x_'='_x not
R19401:19406 Imp <> update def
R19397:19400 Coq.Init.Logic <> :type_scope:x_'='_x not
R19421:19421 Coq.Init.Logic <> :type_scope:x_'='_x not
R19401:19406 Imp <> update def
R19441:19465 Equiv <> functional_extensionality prfax
R19441:19465 Equiv <> functional_extensionality prfax
R19494:19504 Imp <> update_same thm
R19494:19504 Imp <> update_same thm
prf 19638:19650 <> assign_aequiv
R19691:19696 Equiv <> cequiv def
R19705:19709 Imp <> ::x_'::='_x not
R19704:19704 Equiv <> X var
R19710:19710 Equiv <> e var
R19698:19701 Imp <> ::'SKIP' not
R19668:19673 Equiv <> aequiv def
R19683:19683 Equiv <> e var
R19676:19678 Imp <> AId constr
R19680:19680 Equiv <> X var
R19818:19820 Coq.Init.Logic <> :type_scope:x_'='_x not
R19821:19826 Imp <> update def
R19835:19839 Imp <> aeval def
R19818:19820 Coq.Init.Logic <> :type_scope:x_'='_x not
R19821:19826 Imp <> update def
R19835:19839 Imp <> aeval def
R19863:19887 Equiv <> functional_extensionality prfax
R19863:19887 Equiv <> functional_extensionality prfax
R19912:19917 Equiv <> aequiv def
R19967:19977 Imp <> update_same thm
R19967:19977 Imp <> update_same thm
R20068:20073 Imp <> update def
R20081:20085 Imp <> aeval def
R20068:20073 Imp <> update def
R20081:20085 Imp <> aeval def
R20126:20150 Equiv <> functional_extensionality prfax
R20126:20150 Equiv <> functional_extensionality prfax
R20174:20184 Imp <> update_same thm
R20174:20184 Imp <> update_same thm
prf 20765:20775 <> refl_aequiv
R20791:20794 Imp <> aexp ind
R20798:20803 Equiv <> aequiv def
R20807:20807 Equiv <> a var
R20805:20805 Equiv <> a var
prf 20858:20867 <> sym_aequiv
R20887:20890 Imp <> aexp ind
R20913:20918 Equiv <> aequiv def
R20923:20924 Equiv <> a1 var
R20920:20921 Equiv <> a2 var
R20897:20902 Equiv <> aequiv def
R20907:20908 Equiv <> a2 var
R20904:20905 Equiv <> a1 var
prf 20995:21006 <> trans_aequiv
R21029:21032 Imp <> aexp ind
R21071:21076 Equiv <> aequiv def
R21081:21082 Equiv <> a3 var
R21078:21079 Equiv <> a1 var
R21055:21060 Equiv <> aequiv def
R21065:21066 Equiv <> a3 var
R21062:21063 Equiv <> a2 var
R21039:21044 Equiv <> aequiv def
R21049:21050 Equiv <> a2 var
R21046:21047 Equiv <> a1 var
R21102:21107 Equiv <> aequiv def
prf 21202:21212 <> refl_bequiv
R21228:21231 Imp <> bexp ind
R21235:21240 Equiv <> bequiv def
R21244:21244 Equiv <> b var
R21242:21242 Equiv <> b var
R21263:21268 Equiv <> bequiv def
prf 21310:21319 <> sym_bequiv
R21339:21342 Imp <> bexp ind
R21365:21370 Equiv <> bequiv def
R21375:21376 Equiv <> b1 var
R21372:21373 Equiv <> b2 var
R21349:21354 Equiv <> bequiv def
R21359:21360 Equiv <> b2 var
R21356:21357 Equiv <> b1 var
R21395:21400 Equiv <> bequiv def
prf 21462:21473 <> trans_bequiv
R21496:21499 Imp <> bexp ind
R21538:21543 Equiv <> bequiv def
R21548:21549 Equiv <> b3 var
R21545:21546 Equiv <> b1 var
R21522:21527 Equiv <> bequiv def
R21532:21533 Equiv <> b3 var
R21529:21530 Equiv <> b2 var
R21506:21511 Equiv <> bequiv def
R21516:21517 Equiv <> b2 var
R21513:21514 Equiv <> b1 var
R21569:21574 Equiv <> bequiv def
prf 21669:21679 <> refl_cequiv
R21695:21697 Imp <> com ind
R21701:21706 Equiv <> cequiv def
R21710:21710 Equiv <> c var
R21708:21708 Equiv <> c var
R21729:21734 Equiv <> cequiv def
R21760:21767 Coq.Init.Logic <> iff_refl thm
R21760:21767 Coq.Init.Logic <> iff_refl thm
prf 21783:21792 <> sym_cequiv
R21812:21814 Imp <> com ind
R21837:21842 Equiv <> cequiv def
R21847:21848 Equiv <> c1 var
R21844:21845 Equiv <> c2 var
R21821:21826 Equiv <> cequiv def
R21831:21832 Equiv <> c2 var
R21828:21829 Equiv <> c1 var
R21867:21872 Equiv <> cequiv def
R21922:21926 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R21910:21912 Imp <> ::x_'/'_x_'||'_x not
R21915:21918 Imp <> ::x_'/'_x_'||'_x not
R21929:21931 Imp <> ::x_'/'_x_'||'_x not
R21934:21937 Imp <> ::x_'/'_x_'||'_x not
R21922:21926 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R21910:21912 Imp <> ::x_'/'_x_'||'_x not
R21915:21918 Imp <> ::x_'/'_x_'||'_x not
R21929:21931 Imp <> ::x_'/'_x_'||'_x not
R21934:21937 Imp <> ::x_'/'_x_'||'_x not
R22000:22006 Coq.Init.Logic <> iff_sym thm
R22000:22006 Coq.Init.Logic <> iff_sym thm
prf 22033:22041 <> iff_trans
R22107:22111 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R22105:22106 Equiv <> P1 var
R22112:22113 Equiv <> P3 var
R22092:22096 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R22090:22091 Equiv <> P2 var
R22097:22098 Equiv <> P3 var
R22077:22081 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R22075:22076 Equiv <> P1 var
R22082:22083 Equiv <> P2 var
prf 22281:22292 <> trans_cequiv
R22315:22317 Imp <> com ind
R22356:22361 Equiv <> cequiv def
R22366:22367 Equiv <> c3 var
R22363:22364 Equiv <> c1 var
R22340:22345 Equiv <> cequiv def
R22350:22351 Equiv <> c3 var
R22347:22348 Equiv <> c2 var
R22324:22329 Equiv <> cequiv def
R22334:22335 Equiv <> c2 var
R22331:22332 Equiv <> c1 var
R22387:22392 Equiv <> cequiv def
R22453:22455 Imp <> ::x_'/'_x_'||'_x not
R22458:22461 Imp <> ::x_'/'_x_'||'_x not
R22435:22443 Equiv <> iff_trans thm
R22453:22455 Imp <> ::x_'/'_x_'||'_x not
R22458:22461 Imp <> ::x_'/'_x_'||'_x not
R22435:22443 Equiv <> iff_trans thm
prf 23818:23832 <> CAss_congruence
R23874:23879 Equiv <> cequiv def
R23894:23897 Imp <> CAss constr
R23901:23903 Equiv <> a1' var
R23899:23899 Equiv <> i var
R23882:23885 Imp <> CAss constr
R23889:23890 Equiv <> a1 var
R23887:23887 Equiv <> i var
R23855:23860 Equiv <> aequiv def
R23865:23867 Equiv <> a1' var
R23862:23863 Equiv <> a1 var
R24016:24020 Imp <> E_Ass constr
R24016:24020 Imp <> E_Ass constr
R24103:24107 Imp <> E_Ass constr
R24103:24107 Imp <> E_Ass constr
prf 25961:25977 <> CWhile_congruence
R26041:26046 Equiv <> cequiv def
R26070:26075 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26079:26082 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26086:26089 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26076:26078 Equiv <> b1' var
R26083:26085 Equiv <> c1' var
R26049:26054 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26057:26060 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26063:26066 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26055:26056 Equiv <> b1 var
R26061:26062 Equiv <> c1 var
R26022:26027 Equiv <> cequiv def
R26032:26034 Equiv <> c1' var
R26029:26030 Equiv <> c1 var
R26005:26010 Equiv <> bequiv def
R26015:26017 Equiv <> b1' var
R26012:26013 Equiv <> b1 var
R26133:26138 Equiv <> bequiv def
R26140:26145 Equiv <> cequiv def
R26237:26242 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26245:26248 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26251:26254 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26237:26242 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26245:26248 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26251:26254 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26351:26360 Imp <> E_WhileEnd constr
R26351:26360 Imp <> E_WhileEnd constr
R26426:26436 Imp <> E_WhileLoop constr
R26426:26436 Imp <> E_WhileLoop constr
R26693:26698 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26702:26705 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26709:26712 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26693:26698 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26702:26705 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26709:26712 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R26811:26820 Imp <> E_WhileEnd constr
R26811:26820 Imp <> E_WhileEnd constr
R26886:26896 Imp <> E_WhileLoop constr
R26886:26896 Imp <> E_WhileLoop constr
prf 27199:27213 <> CSeq_congruence
R27277:27282 Equiv <> cequiv def
R27296:27296 Imp <> ::x_';'_x not
R27293:27295 Equiv <> c1' var
R27297:27299 Equiv <> c2' var
R27287:27287 Imp <> ::x_';'_x not
R27285:27286 Equiv <> c1 var
R27288:27289 Equiv <> c2 var
R27258:27263 Equiv <> cequiv def
R27268:27270 Equiv <> c2' var
R27265:27266 Equiv <> c2 var
R27241:27246 Equiv <> cequiv def
R27251:27253 Equiv <> c1' var
R27248:27249 Equiv <> c1 var
R27338:27343 Equiv <> cequiv def
R27447:27451 Imp <> E_Seq constr
R27447:27451 Imp <> E_Seq constr
R27603:27607 Imp <> E_Seq constr
R27603:27607 Imp <> E_Seq constr
prf 27808:27821 <> CIf_congruence
R27905:27910 Equiv <> cequiv def
R27940:27943 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27946:27951 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27955:27960 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27964:27966 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27944:27945 Equiv <> b' var
R27952:27954 Equiv <> c1' var
R27961:27963 Equiv <> c2' var
R27913:27916 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27918:27923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27926:27931 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27934:27936 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27917:27917 Equiv <> b var
R27924:27925 Equiv <> c1 var
R27932:27933 Equiv <> c2 var
R27886:27891 Equiv <> cequiv def
R27896:27898 Equiv <> c2' var
R27893:27894 Equiv <> c2 var
R27869:27874 Equiv <> cequiv def
R27879:27881 Equiv <> c1' var
R27876:27877 Equiv <> c1 var
R27854:27859 Equiv <> bequiv def
R27863:27864 Equiv <> b' var
R27861:27861 Equiv <> b var
R28004:28009 Equiv <> bequiv def
R28011:28016 Equiv <> cequiv def
R28212:28219 Imp <> E_IfTrue constr
R28212:28219 Imp <> E_IfTrue constr
R28315:28323 Imp <> E_IfFalse constr
R28315:28323 Imp <> E_IfFalse constr
R28457:28464 Imp <> E_IfTrue constr
R28457:28464 Imp <> E_IfTrue constr
R28560:28568 Imp <> E_IfFalse constr
R28560:28568 Imp <> E_IfFalse constr
def 28702:28719 <> congruence_example
R28724:28729 Equiv <> cequiv def
R28911:28917 Imp <> ::x_';'_x not
R28900:28904 Imp <> ::x_'::='_x not
R28899:28899 Imp <> X def
R28905:28908 Imp <> ANum constr
R28918:28922 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28943:28961 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28990:29033 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R29047:29054 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28923:28925 Imp <> BEq constr
R28936:28939 Imp <> ANum constr
R28928:28930 Imp <> AId constr
R28932:28932 Imp <> X def
R28963:28967 Imp <> ::x_'::='_x not
R28962:28962 Imp <> Y def
R28968:28973 Imp <> AMinus constr
R28984:28986 Imp <> AId constr
R28988:28988 Imp <> X def
R28976:28978 Imp <> AId constr
R28980:28980 Imp <> X def
R29035:29039 Imp <> ::x_'::='_x not
R29034:29034 Imp <> Y def
R29040:29043 Imp <> ANum constr
R28769:28775 Imp <> ::x_';'_x not
R28758:28762 Imp <> ::x_'::='_x not
R28757:28757 Imp <> X def
R28763:28766 Imp <> ANum constr
R28776:28780 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28801:28819 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28832:28849 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28863:28870 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28781:28783 Imp <> BEq constr
R28794:28797 Imp <> ANum constr
R28786:28788 Imp <> AId constr
R28790:28790 Imp <> X def
R28821:28825 Imp <> ::x_'::='_x not
R28820:28820 Imp <> Y def
R28826:28829 Imp <> ANum constr
R28851:28855 Imp <> ::x_'::='_x not
R28850:28850 Imp <> Y def
R28856:28859 Imp <> ANum constr
R29073:29087 Equiv <> CSeq_congruence thm
R29073:29087 Equiv <> CSeq_congruence thm
R29101:29111 Equiv <> refl_cequiv thm
R29101:29111 Equiv <> refl_cequiv thm
R29125:29138 Equiv <> CIf_congruence thm
R29125:29138 Equiv <> CIf_congruence thm
R29153:29163 Equiv <> refl_bequiv thm
R29153:29163 Equiv <> refl_bequiv thm
R29178:29192 Equiv <> CAss_congruence thm
R29178:29192 Equiv <> CAss_congruence thm
R29202:29207 Equiv <> aequiv def
R29242:29251 Coq.Arith.Minus <> minus_diag thm
R29242:29251 Coq.Arith.Minus <> minus_diag thm
R29266:29276 Equiv <> refl_cequiv thm
R29266:29276 Equiv <> refl_cequiv thm
def 29954:29965 <> atrans_sound
R29985:29988 Imp <> aexp ind
R29977:29980 Imp <> aexp ind
R30015:30018 Imp <> aexp ind
R30026:30031 Equiv <> aequiv def
R30036:30041 Equiv <> atrans var
R30043:30043 Equiv <> a var
R30033:30033 Equiv <> a var
def 30059:30070 <> btrans_sound
R30090:30093 Imp <> bexp ind
R30082:30085 Imp <> bexp ind
R30120:30123 Imp <> bexp ind
R30131:30136 Equiv <> bequiv def
R30141:30146 Equiv <> btrans var
R30148:30148 Equiv <> b var
R30138:30138 Equiv <> b var
def 30164:30175 <> ctrans_sound
R30194:30196 Imp <> com ind
R30187:30189 Imp <> com ind
R30223:30225 Imp <> com ind
R30233:30238 Equiv <> cequiv def
R30243:30248 Equiv <> ctrans var
R30250:30250 Equiv <> c var
R30240:30240 Equiv <> c var
def 30568:30586 <> fold_constants_aexp
R30593:30596 Imp <> aexp ind
R30601:30604 Imp <> aexp ind
R30617:30617 Equiv <> a var
R30628:30631 Imp <> ANum constr
R30644:30647 Imp <> ANum constr
R30655:30657 Imp <> AId constr
R30671:30673 Imp <> AId constr
R30681:30685 Imp <> APlus constr
R30710:30710 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30733:30734 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30757:30757 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30711:30729 Equiv <> fold_constants_aexp def
R30735:30753 Equiv <> fold_constants_aexp def
R30772:30772 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30780:30781 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30789:30789 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30773:30776 Imp <> ANum constr
R30782:30785 Imp <> ANum constr
R30794:30797 Imp <> ANum constr
R30802:30804 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R30817:30817 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30821:30822 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30826:30826 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30831:30835 Imp <> APlus constr
R30859:30864 Imp <> AMinus constr
R30888:30888 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30911:30912 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30935:30935 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30889:30907 Equiv <> fold_constants_aexp def
R30913:30931 Equiv <> fold_constants_aexp def
R30950:30950 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30958:30959 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30967:30967 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30951:30954 Imp <> ANum constr
R30960:30963 Imp <> ANum constr
R30972:30975 Imp <> ANum constr
R30980:30982 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R30995:30995 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30999:31000 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31004:31004 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31009:31014 Imp <> AMinus constr
R31038:31042 Imp <> AMult constr
R31067:31067 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31090:31091 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31114:31114 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31068:31086 Equiv <> fold_constants_aexp def
R31092:31110 Equiv <> fold_constants_aexp def
R31129:31129 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31137:31138 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31146:31146 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31130:31133 Imp <> ANum constr
R31139:31142 Imp <> ANum constr
R31151:31154 Imp <> ANum constr
R31159:31161 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R31174:31174 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31178:31179 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31183:31183 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R31188:31192 Imp <> AMult constr
def 31228:31240 <> fold_aexp_ex1
R31316:31321 Coq.Init.Logic <> :type_scope:x_'='_x not
R31248:31266 Equiv <> fold_constants_aexp def
R31276:31280 Imp <> AMult constr
R31309:31311 Imp <> AId constr
R31313:31313 Imp <> X def
R31283:31287 Imp <> APlus constr
R31299:31302 Imp <> ANum constr
R31290:31293 Imp <> ANum constr
R31322:31326 Imp <> AMult constr
R31338:31340 Imp <> AId constr
R31342:31342 Imp <> X def
R31329:31332 Imp <> ANum constr
def 31685:31697 <> fold_aexp_ex2
R31790:31794 Coq.Init.Logic <> :type_scope:x_'='_x not
R31705:31723 Equiv <> fold_constants_aexp def
R31733:31738 Imp <> AMinus constr
R31749:31753 Imp <> APlus constr
R31782:31784 Imp <> AId constr
R31786:31786 Imp <> Y def
R31756:31760 Imp <> AMult constr
R31772:31775 Imp <> ANum constr
R31763:31766 Imp <> ANum constr
R31741:31743 Imp <> AId constr
R31745:31745 Imp <> X def
R31795:31800 Imp <> AMinus constr
R31811:31815 Imp <> APlus constr
R31827:31829 Imp <> AId constr
R31831:31831 Imp <> Y def
R31818:31821 Imp <> ANum constr
R31803:31805 Imp <> AId constr
R31807:31807 Imp <> X def
def 32047:32065 <> fold_constants_bexp
R32072:32075 Imp <> bexp ind
R32080:32083 Imp <> bexp ind
R32096:32096 Equiv <> b var
R32107:32111 Imp <> BTrue constr
R32123:32127 Imp <> BTrue constr
R32133:32138 Imp <> BFalse constr
R32149:32154 Imp <> BFalse constr
R32160:32162 Imp <> BEq constr
R32187:32187 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32210:32211 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32234:32234 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32188:32206 Equiv <> fold_constants_aexp def
R32212:32230 Equiv <> fold_constants_aexp def
R32249:32249 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32257:32258 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32266:32266 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32250:32253 Imp <> ANum constr
R32259:32262 Imp <> ANum constr
R32274:32280 Coq.Arith.EqNat <> beq_nat def
R32304:32309 Imp <> BFalse constr
R32293:32297 Imp <> BTrue constr
R32319:32319 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32323:32324 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32328:32328 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32333:32335 Imp <> BEq constr
R32359:32361 Imp <> BLe constr
R32386:32386 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32409:32410 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32433:32433 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32387:32405 Equiv <> fold_constants_aexp def
R32411:32429 Equiv <> fold_constants_aexp def
R32448:32448 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32456:32457 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32465:32465 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32449:32452 Imp <> ANum constr
R32458:32461 Imp <> ANum constr
R32473:32479 SfLib <> ble_nat def
R32503:32508 Imp <> BFalse constr
R32492:32496 Imp <> BTrue constr
R32518:32518 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32522:32523 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32527:32527 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32532:32534 Imp <> BLe constr
R32558:32561 Imp <> BNot constr
R32584:32602 Equiv <> fold_constants_bexp def
R32621:32625 Imp <> BTrue constr
R32630:32635 Imp <> BFalse constr
R32645:32650 Imp <> BFalse constr
R32655:32659 Imp <> BTrue constr
R32676:32679 Imp <> BNot constr
R32699:32702 Imp <> BAnd constr
R32727:32727 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32750:32751 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32774:32774 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32728:32746 Equiv <> fold_constants_bexp def
R32752:32770 Equiv <> fold_constants_bexp def
R32789:32789 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32795:32796 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32802:32802 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32790:32794 Imp <> BTrue constr
R32797:32801 Imp <> BTrue constr
R32807:32811 Imp <> BTrue constr
R32821:32821 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32827:32828 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32835:32835 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32822:32826 Imp <> BTrue constr
R32829:32834 Imp <> BFalse constr
R32840:32845 Imp <> BFalse constr
R32855:32855 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32862:32863 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32869:32869 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32856:32861 Imp <> BFalse constr
R32864:32868 Imp <> BTrue constr
R32874:32879 Imp <> BFalse constr
R32889:32889 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32896:32897 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32904:32904 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32890:32895 Imp <> BFalse constr
R32898:32903 Imp <> BFalse constr
R32909:32914 Imp <> BFalse constr
R32924:32924 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32928:32929 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32933:32933 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R32938:32941 Imp <> BAnd constr
def 32977:32989 <> fold_bexp_ex1
R33056:33060 Coq.Init.Logic <> :type_scope:x_'='_x not
R32997:33015 Equiv <> fold_constants_bexp def
R33018:33021 Imp <> BAnd constr
R33030:33033 Imp <> BNot constr
R33036:33039 Imp <> BAnd constr
R33048:33052 Imp <> BTrue constr
R33041:33046 Imp <> BFalse constr
R33023:33027 Imp <> BTrue constr
R33061:33065 Imp <> BTrue constr
def 33102:33114 <> fold_bexp_ex2
R33267:33271 Coq.Init.Logic <> :type_scope:x_'='_x not
R33122:33140 Equiv <> fold_constants_bexp def
R33150:33153 Imp <> BAnd constr
R33191:33193 Imp <> BEq constr
R33223:33228 Imp <> AMinus constr
R33240:33244 Imp <> APlus constr
R33256:33259 Imp <> ANum constr
R33247:33250 Imp <> ANum constr
R33231:33234 Imp <> ANum constr
R33196:33199 Imp <> ANum constr
R33156:33158 Imp <> BEq constr
R33169:33171 Imp <> AId constr
R33173:33173 Imp <> Y def
R33161:33163 Imp <> AId constr
R33165:33165 Imp <> X def
R33272:33275 Imp <> BAnd constr
R33299:33303 Imp <> BTrue constr
R33278:33280 Imp <> BEq constr
R33291:33293 Imp <> AId constr
R33295:33295 Imp <> Y def
R33283:33285 Imp <> AId constr
R33287:33287 Imp <> X def
def 33457:33474 <> fold_constants_com
R33481:33483 Imp <> com ind
R33488:33490 Imp <> com ind
R33503:33503 Equiv <> c var
R33514:33517 Imp <> ::'SKIP' not
R33534:33537 Imp <> ::'SKIP' not
R33544:33548 Imp <> ::x_'::='_x not
R33562:33565 Imp <> CAss constr
R33570:33588 Equiv <> fold_constants_aexp def
R33599:33601 Imp <> ::x_';'_x not
R33616:33616 Imp <> ::x_';'_x not
R33638:33642 Imp <> ::x_';'_x not
R33664:33664 Imp <> ::x_';'_x not
R33617:33634 Equiv <> fold_constants_com def
R33643:33660 Equiv <> fold_constants_com def
R33670:33673 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33675:33680 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33683:33688 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33691:33693 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33711:33729 Equiv <> fold_constants_bexp def
R33746:33750 Imp <> BTrue constr
R33755:33772 Equiv <> fold_constants_com def
R33785:33790 Imp <> BFalse constr
R33795:33812 Equiv <> fold_constants_com def
R33831:33834 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33837:33842 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33864:33891 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33913:33915 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R33843:33860 Equiv <> fold_constants_com def
R33892:33909 Equiv <> fold_constants_com def
R33931:33936 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R33938:33941 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R33943:33946 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R33964:33982 Equiv <> fold_constants_bexp def
R33999:34003 Imp <> BTrue constr
R34008:34013 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34019:34022 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34027:34030 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34014:34018 Imp <> BTrue constr
R34023:34026 Imp <> ::'SKIP' not
R34040:34045 Imp <> BFalse constr
R34050:34053 Imp <> ::'SKIP' not
R34069:34074 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34077:34081 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34102:34106 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34082:34099 Equiv <> fold_constants_com def
R34101:34101 Equiv <> c var
def 34134:34145 <> fold_com_ex1
R34597:34637 Coq.Init.Logic <> :type_scope:x_'='_x not
R34895:34895 Coq.Init.Logic <> :type_scope:x_'='_x not
R34151:34168 Equiv <> fold_constants_com def
R34233:34239 Imp <> ::x_';'_x not
R34205:34209 Imp <> ::x_'::='_x not
R34204:34204 Imp <> X def
R34210:34214 Imp <> APlus constr
R34226:34229 Imp <> ANum constr
R34217:34220 Imp <> ANum constr
R34269:34275 Imp <> ::x_';'_x not
R34241:34245 Imp <> ::x_'::='_x not
R34240:34240 Imp <> Y def
R34246:34251 Imp <> AMinus constr
R34262:34265 Imp <> ANum constr
R34254:34256 Imp <> AId constr
R34258:34258 Imp <> X def
R34390:34396 Imp <> ::x_';'_x not
R34276:34279 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34334:34346 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34351:34369 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34382:34389 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34280:34282 Imp <> BEq constr
R34310:34314 Imp <> APlus constr
R34326:34329 Imp <> ANum constr
R34317:34320 Imp <> ANum constr
R34285:34290 Imp <> AMinus constr
R34301:34303 Imp <> AId constr
R34305:34305 Imp <> Y def
R34293:34295 Imp <> AId constr
R34297:34297 Imp <> X def
R34347:34350 Imp <> ::'SKIP' not
R34371:34375 Imp <> ::x_'::='_x not
R34370:34370 Imp <> Y def
R34376:34379 Imp <> ANum constr
R34513:34519 Imp <> ::x_';'_x not
R34397:34400 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34457:34469 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34482:34499 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34504:34512 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34401:34403 Imp <> BLe constr
R34415:34420 Imp <> AMinus constr
R34432:34436 Imp <> APlus constr
R34448:34451 Imp <> ANum constr
R34439:34442 Imp <> ANum constr
R34423:34426 Imp <> ANum constr
R34406:34409 Imp <> ANum constr
R34471:34475 Imp <> ::x_'::='_x not
R34470:34470 Imp <> Y def
R34476:34479 Imp <> ANum constr
R34500:34503 Imp <> ::'SKIP' not
R34520:34525 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34546:34557 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34586:34595 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34526:34528 Imp <> BEq constr
R34539:34542 Imp <> ANum constr
R34531:34533 Imp <> AId constr
R34535:34535 Imp <> Y def
R34559:34563 Imp <> ::x_'::='_x not
R34558:34558 Imp <> X def
R34564:34568 Imp <> APlus constr
R34579:34582 Imp <> ANum constr
R34571:34573 Imp <> AId constr
R34575:34575 Imp <> X def
R34650:34656 Imp <> ::x_';'_x not
R34639:34643 Imp <> ::x_'::='_x not
R34638:34638 Imp <> X def
R34644:34647 Imp <> ANum constr
R34686:34692 Imp <> ::x_';'_x not
R34658:34662 Imp <> ::x_'::='_x not
R34657:34657 Imp <> Y def
R34663:34668 Imp <> AMinus constr
R34679:34682 Imp <> ANum constr
R34671:34673 Imp <> AId constr
R34675:34675 Imp <> X def
R34793:34799 Imp <> ::x_';'_x not
R34693:34696 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34734:34746 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34751:34770 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34783:34792 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R34697:34699 Imp <> BEq constr
R34727:34730 Imp <> ANum constr
R34702:34707 Imp <> AMinus constr
R34718:34720 Imp <> AId constr
R34722:34722 Imp <> Y def
R34710:34712 Imp <> AId constr
R34714:34714 Imp <> X def
R34747:34750 Imp <> ::'SKIP' not
R34772:34776 Imp <> ::x_'::='_x not
R34771:34771 Imp <> Y def
R34777:34780 Imp <> ANum constr
R34812:34818 Imp <> ::x_';'_x not
R34801:34805 Imp <> ::x_'::='_x not
R34800:34800 Imp <> Y def
R34806:34809 Imp <> ANum constr
R34819:34824 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34845:34856 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34885:34894 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R34825:34827 Imp <> BEq constr
R34838:34841 Imp <> ANum constr
R34830:34832 Imp <> AId constr
R34834:34834 Imp <> Y def
R34858:34862 Imp <> ::x_'::='_x not
R34857:34857 Imp <> X def
R34863:34867 Imp <> APlus constr
R34878:34881 Imp <> ANum constr
R34870:34872 Imp <> AId constr
R34874:34874 Imp <> X def
prf 35145:35169 <> fold_constants_aexp_sound
R35176:35187 Equiv <> atrans_sound def
R35189:35207 Equiv <> fold_constants_aexp def
R35226:35237 Equiv <> atrans_sound def
R35257:35262 Equiv <> aequiv def
R35691:35709 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35691:35709 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35691:35709 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35691:35709 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
R35735:35753 Equiv <> fold_constants_aexp def
prf 38755:38779 <> fold_constants_bexp_sound
R38785:38796 Equiv <> btrans_sound def
R38798:38816 Equiv <> fold_constants_bexp def
R38835:38846 Equiv <> btrans_sound def
R38866:38871 Equiv <> bequiv def
R39382:39400 Equiv <> fold_constants_aexp def
R39382:39400 Equiv <> fold_constants_aexp def
R39429:39447 Equiv <> fold_constants_aexp def
R39429:39447 Equiv <> fold_constants_aexp def
R39474:39478 Imp <> aeval def
R39493:39497 Imp <> aeval def
R39540:39564 Equiv <> fold_constants_aexp_sound thm
R39493:39497 Imp <> aeval def
R39474:39478 Imp <> aeval def
R39540:39564 Equiv <> fold_constants_aexp_sound thm
R39594:39598 Imp <> aeval def
R39613:39617 Imp <> aeval def
R39660:39684 Equiv <> fold_constants_aexp_sound thm
R39613:39617 Imp <> aeval def
R39594:39598 Imp <> aeval def
R39660:39684 Equiv <> fold_constants_aexp_sound thm
R39875:39881 Coq.Arith.EqNat <> beq_nat def
R39875:39881 Coq.Arith.EqNat <> beq_nat def
R40000:40018 Equiv <> fold_constants_aexp def
R40000:40018 Equiv <> fold_constants_aexp def
R40047:40065 Equiv <> fold_constants_aexp def
R40047:40065 Equiv <> fold_constants_aexp def
R40159:40161 Coq.Init.Logic <> :type_scope:x_'='_x not
R40148:40152 Imp <> aeval def
R40162:40166 Imp <> aeval def
R40159:40161 Coq.Init.Logic <> :type_scope:x_'='_x not
R40148:40152 Imp <> aeval def
R40162:40166 Imp <> aeval def
R40234:40258 Equiv <> fold_constants_aexp_sound thm
R40234:40258 Equiv <> fold_constants_aexp_sound thm
R40284:40286 Coq.Init.Logic <> :type_scope:x_'='_x not
R40273:40277 Imp <> aeval def
R40287:40291 Imp <> aeval def
R40284:40286 Coq.Init.Logic <> :type_scope:x_'='_x not
R40273:40277 Imp <> aeval def
R40287:40291 Imp <> aeval def
R40359:40383 Equiv <> fold_constants_aexp_sound thm
R40359:40383 Equiv <> fold_constants_aexp_sound thm
R40596:40602 SfLib <> ble_nat def
R40596:40602 SfLib <> ble_nat def
R40665:40683 Equiv <> fold_constants_bexp def
R40665:40683 Equiv <> fold_constants_bexp def
R40786:40804 Equiv <> fold_constants_bexp def
R40786:40804 Equiv <> fold_constants_bexp def
R40833:40851 Equiv <> fold_constants_bexp def
R40833:40851 Equiv <> fold_constants_bexp def
prf 41082:41105 <> fold_constants_com_sound
R41112:41123 Equiv <> ctrans_sound def
R41125:41142 Equiv <> fold_constants_com def
R41162:41173 Equiv <> ctrans_sound def
R41247:41257 Equiv <> refl_cequiv thm
R41247:41257 Equiv <> refl_cequiv thm
R41280:41294 Equiv <> CAss_congruence thm
R41280:41294 Equiv <> CAss_congruence thm
R41303:41327 Equiv <> fold_constants_aexp_sound thm
R41303:41327 Equiv <> fold_constants_aexp_sound thm
R41348:41362 Equiv <> CSeq_congruence thm
R41348:41362 Equiv <> CSeq_congruence thm
R41404:41409 Equiv <> bequiv def
R41414:41432 Equiv <> fold_constants_bexp def
R41404:41409 Equiv <> bequiv def
R41414:41432 Equiv <> fold_constants_bexp def
R41476:41500 Equiv <> fold_constants_bexp_sound thm
R41476:41500 Equiv <> fold_constants_bexp_sound thm
R41517:41535 Equiv <> fold_constants_bexp def
R41517:41535 Equiv <> fold_constants_bexp def
R41723:41736 Equiv <> CIf_congruence thm
R41723:41736 Equiv <> CIf_congruence thm
R41723:41736 Equiv <> CIf_congruence thm
R41723:41736 Equiv <> CIf_congruence thm
R41723:41736 Equiv <> CIf_congruence thm
R41723:41736 Equiv <> CIf_congruence thm
R41723:41736 Equiv <> CIf_congruence thm
R41791:41802 Equiv <> trans_cequiv thm
R41791:41802 Equiv <> trans_cequiv thm
R41841:41848 Equiv <> IFB_true thm
R41841:41848 Equiv <> IFB_true thm
R41903:41914 Equiv <> trans_cequiv thm
R41903:41914 Equiv <> trans_cequiv thm
R41953:41961 Equiv <> IFB_false thm
R41953:41961 Equiv <> IFB_false thm
R42024:42029 Equiv <> bequiv def
R42034:42052 Equiv <> fold_constants_bexp def
R42024:42029 Equiv <> bequiv def
R42034:42052 Equiv <> fold_constants_bexp def
R42096:42120 Equiv <> fold_constants_bexp_sound thm
R42096:42120 Equiv <> fold_constants_bexp_sound thm
R42137:42155 Equiv <> fold_constants_bexp def
R42137:42155 Equiv <> fold_constants_bexp def
R42380:42396 Equiv <> CWhile_congruence thm
R42380:42396 Equiv <> CWhile_congruence thm
R42380:42396 Equiv <> CWhile_congruence thm
R42380:42396 Equiv <> CWhile_congruence thm
R42380:42396 Equiv <> CWhile_congruence thm
R42380:42396 Equiv <> CWhile_congruence thm
R42380:42396 Equiv <> CWhile_congruence thm
R42451:42460 Equiv <> WHILE_true thm
R42451:42460 Equiv <> WHILE_true thm
R42515:42525 Equiv <> WHILE_false thm
R42515:42525 Equiv <> WHILE_false thm
def 44020:44038 <> optimize_0plus_aexp
R44043:44046 Imp <> aexp ind
R44051:44054 Imp <> aexp ind
R44068:44068 Equiv <> e var
R44079:44082 Imp <> ANum constr
R44089:44092 Imp <> ANum constr
R44100:44102 Imp <> AId constr
R44109:44111 Imp <> AId constr
R44119:44123 Imp <> APlus constr
R44126:44129 Imp <> ANum constr
R44140:44158 Equiv <> optimize_0plus_aexp def
R44167:44171 Imp <> APlus constr
R44182:44186 Imp <> APlus constr
R44214:44232 Equiv <> optimize_0plus_aexp def
R44189:44207 Equiv <> optimize_0plus_aexp def
R44242:44247 Imp <> AMinus constr
R44258:44263 Imp <> AMinus constr
R44291:44309 Equiv <> optimize_0plus_aexp def
R44266:44284 Equiv <> optimize_0plus_aexp def
R44319:44323 Imp <> AMult constr
R44334:44338 Imp <> AMult constr
R44366:44384 Equiv <> optimize_0plus_aexp def
R44341:44359 Equiv <> optimize_0plus_aexp def
def 44407:44425 <> optimize_0plus_bexp
R44432:44435 Imp <> bexp ind
R44440:44443 Imp <> bexp ind
R44456:44456 Equiv <> b var
R44467:44471 Imp <> BTrue constr
R44482:44486 Imp <> BTrue constr
R44492:44497 Imp <> BFalse constr
R44507:44512 Imp <> BFalse constr
R44518:44520 Imp <> BEq constr
R44533:44535 Imp <> BEq constr
R44563:44581 Equiv <> optimize_0plus_aexp def
R44538:44556 Equiv <> optimize_0plus_aexp def
R44591:44593 Imp <> BLe constr
R44604:44606 Imp <> BLe constr
R44634:44652 Equiv <> optimize_0plus_aexp def
R44609:44627 Equiv <> optimize_0plus_aexp def
R44662:44665 Imp <> BNot constr
R44677:44680 Imp <> BNot constr
R44683:44701 Equiv <> optimize_0plus_bexp def
R44711:44714 Imp <> BAnd constr
R44726:44729 Imp <> BAnd constr
R44757:44775 Equiv <> optimize_0plus_bexp def
R44732:44750 Equiv <> optimize_0plus_bexp def
def 44798:44815 <> optimize_0plus_com
R44822:44824 Imp <> com ind
R44829:44831 Imp <> com ind
R44844:44844 Equiv <> c var
R44855:44858 Imp <> ::'SKIP' not
R44883:44886 Imp <> ::'SKIP' not
R44892:44895 Imp <> CAss constr
R44920:44923 Imp <> CAss constr
R44928:44946 Equiv <> optimize_0plus_aexp def
R44957:44959 Imp <> ::x_';'_x not
R44983:44983 Imp <> ::x_';'_x not
R45005:45009 Imp <> ::x_';'_x not
R45031:45031 Imp <> ::x_';'_x not
R44984:45001 Equiv <> optimize_0plus_com def
R45010:45027 Equiv <> optimize_0plus_com def
R45037:45040 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45042:45047 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45050:45055 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45058:45060 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45065:45069 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45091:45135 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45157:45201 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45223:45259 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45070:45088 Equiv <> optimize_0plus_bexp def
R45136:45153 Equiv <> optimize_0plus_com def
R45202:45219 Equiv <> optimize_0plus_com def
R45265:45270 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R45272:45275 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R45277:45280 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R45293:45299 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R45321:45363 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R45384:45421 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R45300:45318 Equiv <> optimize_0plus_bexp def
R45364:45381 Equiv <> optimize_0plus_com def
R45383:45383 Equiv <> c var
prf 45439:45463 <> optimize_0plus_aexp_sound
R45469:45480 Equiv <> atrans_sound def
R45482:45500 Equiv <> optimize_0plus_aexp def
R45519:45530 Equiv <> atrans_sound def
R45533:45538 Equiv <> aequiv def
R46062:46069 Coq.Arith.Plus <> plus_0_l syndef
R46062:46069 Coq.Arith.Plus <> plus_0_l syndef
prf 46197:46221 <> optimize_0plus_bexp_sound
R46227:46238 Equiv <> btrans_sound def
R46240:46258 Equiv <> optimize_0plus_bexp def
R46277:46288 Equiv <> btrans_sound def
R46291:46296 Equiv <> bequiv def
R46477:46501 Equiv <> optimize_0plus_aexp_sound thm
R46535:46559 Equiv <> optimize_0plus_aexp_sound thm
R46477:46501 Equiv <> optimize_0plus_aexp_sound thm
R46535:46559 Equiv <> optimize_0plus_aexp_sound thm
R46477:46501 Equiv <> optimize_0plus_aexp_sound thm
R46535:46559 Equiv <> optimize_0plus_aexp_sound thm
R46477:46501 Equiv <> optimize_0plus_aexp_sound thm
prf 46656:46679 <> optimize_0plus_com_sound
R46685:46696 Equiv <> ctrans_sound def
R46698:46715 Equiv <> optimize_0plus_com def
R46734:46745 Equiv <> ctrans_sound def
R46748:46753 Equiv <> cequiv def
R46850:46860 Equiv <> refl_cequiv thm
R46850:46860 Equiv <> refl_cequiv thm
R46887:46901 Equiv <> CAss_congruence thm
R46887:46901 Equiv <> CAss_congruence thm
R46914:46938 Equiv <> optimize_0plus_aexp_sound thm
R46914:46938 Equiv <> optimize_0plus_aexp_sound thm
R46963:46977 Equiv <> CSeq_congruence thm
R46987:46992 Equiv <> cequiv def
R46963:46977 Equiv <> CSeq_congruence thm
R47047:47060 Equiv <> CIf_congruence thm
R47070:47075 Equiv <> cequiv def
R47047:47060 Equiv <> CIf_congruence thm
R47088:47112 Equiv <> optimize_0plus_bexp_sound thm
R47088:47112 Equiv <> optimize_0plus_bexp_sound thm
R47169:47185 Equiv <> CWhile_congruence thm
R47195:47200 Equiv <> cequiv def
R47169:47185 Equiv <> CWhile_congruence thm
R47213:47237 Equiv <> optimize_0plus_bexp_sound thm
R47213:47237 Equiv <> optimize_0plus_bexp_sound thm
def 47273:47281 <> optimizer
R47288:47290 Imp <> com ind
R47296:47313 Equiv <> optimize_0plus_com def
R47316:47333 Equiv <> fold_constants_com def
R47335:47335 Equiv <> c var
prf 47348:47362 <> optimizer_sound
R47368:47379 Equiv <> ctrans_sound def
R47381:47389 Equiv <> optimizer def
R47408:47419 Equiv <> ctrans_sound def
R47429:47437 Equiv <> optimizer def
R47479:47496 Equiv <> fold_constants_com def
R47460:47471 Equiv <> trans_cequiv thm
R47479:47496 Equiv <> fold_constants_com def
R47460:47471 Equiv <> trans_cequiv thm
R47510:47533 Equiv <> fold_constants_com_sound thm
R47510:47533 Equiv <> fold_constants_com_sound thm
R47544:47567 Equiv <> optimize_0plus_com_sound thm
R47544:47567 Equiv <> optimize_0plus_com_sound thm
def 48475:48484 <> subst_aexp
R48491:48492 SfLib <> id ind
R48500:48503 Imp <> aexp ind
R48511:48514 Imp <> aexp ind
R48519:48522 Imp <> aexp ind
R48535:48535 Equiv <> a var
R48546:48549 Imp <> ANum constr
R48562:48565 Imp <> ANum constr
R48573:48575 Imp <> AId constr
R48592:48597 SfLib <> beq_id def
R48599:48599 Equiv <> i var
R48616:48618 Imp <> AId constr
R48609:48609 Equiv <> u var
R48627:48631 Imp <> APlus constr
R48643:48647 Imp <> APlus constr
R48670:48679 Equiv <> subst_aexp def
R48683:48683 Equiv <> u var
R48681:48681 Equiv <> i var
R48650:48659 Equiv <> subst_aexp def
R48663:48663 Equiv <> u var
R48661:48661 Equiv <> i var
R48693:48698 Imp <> AMinus constr
R48709:48714 Imp <> AMinus constr
R48737:48746 Equiv <> subst_aexp def
R48750:48750 Equiv <> u var
R48748:48748 Equiv <> i var
R48717:48726 Equiv <> subst_aexp def
R48730:48730 Equiv <> u var
R48728:48728 Equiv <> i var
R48760:48764 Imp <> AMult constr
R48776:48780 Imp <> AMult constr
R48803:48812 Equiv <> subst_aexp def
R48816:48816 Equiv <> u var
R48814:48814 Equiv <> i var
R48783:48792 Equiv <> subst_aexp def
R48796:48796 Equiv <> u var
R48794:48794 Equiv <> i var
def 48838:48850 <> subst_aexp_ex
R48920:48925 Coq.Init.Logic <> :type_scope:x_'='_x not
R48967:48967 Coq.Init.Logic <> :type_scope:x_'='_x not
R48856:48865 Equiv <> subst_aexp def
R48898:48902 Imp <> APlus constr
R48913:48915 Imp <> AId constr
R48917:48917 Imp <> X def
R48905:48907 Imp <> AId constr
R48909:48909 Imp <> Y def
R48870:48874 Imp <> APlus constr
R48887:48890 Imp <> ANum constr
R48877:48880 Imp <> ANum constr
R48867:48867 Imp <> X def
R48926:48930 Imp <> APlus constr
R48941:48945 Imp <> APlus constr
R48958:48961 Imp <> ANum constr
R48948:48951 Imp <> ANum constr
R48933:48935 Imp <> AId constr
R48937:48937 Imp <> Y def
def 49163:49182 <> subst_equiv_property
R49209:49214 Equiv <> cequiv def
R49258:49259 Imp <> ::x_';'_x not
R49251:49255 Imp <> ::x_'::='_x not
R49249:49250 Equiv <> i1 var
R49256:49257 Equiv <> a1 var
R49262:49266 Imp <> ::x_'::='_x not
R49260:49261 Equiv <> i2 var
R49267:49276 Equiv <> subst_aexp def
R49284:49285 Equiv <> a2 var
R49281:49282 Equiv <> a1 var
R49278:49279 Equiv <> i1 var
R49226:49227 Imp <> ::x_';'_x not
R49219:49223 Imp <> ::x_'::='_x not
R49217:49218 Equiv <> i1 var
R49224:49225 Equiv <> a1 var
R49230:49234 Imp <> ::x_'::='_x not
R49228:49229 Equiv <> i2 var
R49235:49236 Equiv <> a2 var
prf 50518:50530 <> subst_inequiv
R50537:50538 Coq.Init.Logic <> :type_scope:'~'_x not
R50539:50558 Equiv <> subst_equiv_property def
R50577:50596 Equiv <> subst_equiv_property def
R50807:50821 Imp <> ::x_';'_x not
R50780:50784 Imp <> ::x_'::='_x not
R50779:50779 Imp <> X def
R50785:50789 Imp <> APlus constr
R50800:50803 Imp <> ANum constr
R50792:50794 Imp <> AId constr
R50796:50796 Imp <> X def
R50823:50827 Imp <> ::x_'::='_x not
R50822:50822 Imp <> Y def
R50828:50830 Imp <> AId constr
R50832:50832 Imp <> X def
R50807:50821 Imp <> ::x_';'_x not
R50780:50784 Imp <> ::x_'::='_x not
R50779:50779 Imp <> X def
R50785:50789 Imp <> APlus constr
R50800:50803 Imp <> ANum constr
R50792:50794 Imp <> AId constr
R50796:50796 Imp <> X def
R50823:50827 Imp <> ::x_'::='_x not
R50822:50822 Imp <> Y def
R50828:50830 Imp <> AId constr
R50832:50832 Imp <> X def
R50889:50903 Imp <> ::x_';'_x not
R50862:50866 Imp <> ::x_'::='_x not
R50861:50861 Imp <> X def
R50867:50871 Imp <> APlus constr
R50882:50885 Imp <> ANum constr
R50874:50876 Imp <> AId constr
R50878:50878 Imp <> X def
R50905:50909 Imp <> ::x_'::='_x not
R50904:50904 Imp <> Y def
R50910:50914 Imp <> APlus constr
R50925:50928 Imp <> ANum constr
R50917:50919 Imp <> AId constr
R50921:50921 Imp <> X def
R50889:50903 Imp <> ::x_';'_x not
R50862:50866 Imp <> ::x_'::='_x not
R50861:50861 Imp <> X def
R50867:50871 Imp <> APlus constr
R50882:50885 Imp <> ANum constr
R50874:50876 Imp <> AId constr
R50878:50878 Imp <> X def
R50905:50909 Imp <> ::x_'::='_x not
R50904:50904 Imp <> Y def
R50910:50914 Imp <> APlus constr
R50925:50928 Imp <> ANum constr
R50917:50919 Imp <> AId constr
R50921:50921 Imp <> X def
R50958:50963 Equiv <> cequiv def
R50958:50963 Equiv <> cequiv def
R51183:51188 Imp <> update def
R51215:51215 Imp <> Y def
R51191:51196 Imp <> update def
R51210:51210 Imp <> X def
R51198:51208 Imp <> empty_state def
R51183:51188 Imp <> update def
R51215:51215 Imp <> Y def
R51191:51196 Imp <> update def
R51210:51210 Imp <> X def
R51198:51208 Imp <> empty_state def
R51240:51245 Imp <> update def
R51272:51272 Imp <> Y def
R51248:51253 Imp <> update def
R51267:51267 Imp <> X def
R51255:51265 Imp <> empty_state def
R51240:51245 Imp <> update def
R51272:51272 Imp <> Y def
R51248:51253 Imp <> update def
R51267:51267 Imp <> X def
R51255:51265 Imp <> empty_state def
R51301:51303 Imp <> ::x_'/'_x_'||'_x not
R51315:51318 Imp <> ::x_'/'_x_'||'_x not
R51304:51314 Imp <> empty_state def
R51341:51343 Imp <> ::x_'/'_x_'||'_x not
R51355:51358 Imp <> ::x_'/'_x_'||'_x not
R51344:51354 Imp <> empty_state def
R51412:51417 Imp <> update def
R51431:51431 Imp <> X def
R51419:51429 Imp <> empty_state def
R51392:51396 Imp <> E_Seq constr
R51452:51456 Imp <> E_Ass constr
R51301:51303 Imp <> ::x_'/'_x_'||'_x not
R51315:51318 Imp <> ::x_'/'_x_'||'_x not
R51304:51314 Imp <> empty_state def
R51341:51343 Imp <> ::x_'/'_x_'||'_x not
R51355:51358 Imp <> ::x_'/'_x_'||'_x not
R51344:51354 Imp <> empty_state def
R51341:51343 Imp <> ::x_'/'_x_'||'_x not
R51355:51358 Imp <> ::x_'/'_x_'||'_x not
R51344:51354 Imp <> empty_state def
R51412:51417 Imp <> update def
R51431:51431 Imp <> X def
R51419:51429 Imp <> empty_state def
R51392:51396 Imp <> E_Seq constr
R51452:51456 Imp <> E_Ass constr
R51452:51456 Imp <> E_Ass constr
R51412:51417 Imp <> update def
R51431:51431 Imp <> X def
R51419:51429 Imp <> empty_state def
R51392:51396 Imp <> E_Seq constr
R51452:51456 Imp <> E_Ass constr
R51452:51456 Imp <> E_Ass constr
R51412:51417 Imp <> update def
R51431:51431 Imp <> X def
R51419:51429 Imp <> empty_state def
R51392:51396 Imp <> E_Seq constr
R51452:51456 Imp <> E_Ass constr
R51452:51456 Imp <> E_Ass constr
R51412:51417 Imp <> update def
R51431:51431 Imp <> X def
R51419:51429 Imp <> empty_state def
R51392:51396 Imp <> E_Seq constr
R51611:51613 Coq.Init.Logic <> :type_scope:x_'='_x not
R51634:51652 Imp <> ceval_deterministic thm
R51657:51667 Imp <> empty_state def
R51611:51613 Coq.Init.Logic <> :type_scope:x_'='_x not
R51634:51652 Imp <> ceval_deterministic thm
R51657:51667 Imp <> empty_state def
R51709:51711 Coq.Init.Logic <> :type_scope:x_'='_x not
R51708:51708 Imp <> Y def
R51716:51716 Imp <> Y def
R51709:51711 Coq.Init.Logic <> :type_scope:x_'='_x not
R51708:51708 Imp <> Y def
R51716:51716 Imp <> Y def
ind 52123:52142 <> var_not_used_in_aexp
constr 52173:52178 <> VNUNum
constr 52227:52231 <> VNUId
constr 52289:52295 <> VNUPlus
constr 52430:52437 <> VNUMinus
constr 52573:52579 <> VNUMult
R52147:52148 SfLib <> id ind
R52153:52156 Imp <> aexp ind
R52191:52210 Equiv <> var_not_used_in_aexp ind
R52215:52218 Imp <> ANum constr
R52220:52220 Equiv <> n var
R52254:52273 Equiv <> var_not_used_in_aexp ind
R52278:52280 Imp <> AId constr
R52282:52282 Equiv <> Y var
R52245:52248 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R52249:52249 Equiv <> Y var
R52389:52408 Equiv <> var_not_used_in_aexp ind
R52413:52417 Imp <> APlus constr
R52422:52423 Equiv <> a2 var
R52419:52420 Equiv <> a1 var
R52354:52373 Equiv <> var_not_used_in_aexp ind
R52377:52378 Equiv <> a2 var
R52319:52338 Equiv <> var_not_used_in_aexp ind
R52342:52343 Equiv <> a1 var
R52531:52550 Equiv <> var_not_used_in_aexp ind
R52555:52560 Imp <> AMinus constr
R52565:52566 Equiv <> a2 var
R52562:52563 Equiv <> a1 var
R52496:52515 Equiv <> var_not_used_in_aexp ind
R52519:52520 Equiv <> a2 var
R52461:52480 Equiv <> var_not_used_in_aexp ind
R52484:52485 Equiv <> a1 var
R52673:52692 Equiv <> var_not_used_in_aexp ind
R52697:52701 Imp <> AMult constr
R52706:52707 Equiv <> a2 var
R52703:52704 Equiv <> a1 var
R52638:52657 Equiv <> var_not_used_in_aexp ind
R52661:52662 Equiv <> a2 var
R52603:52622 Equiv <> var_not_used_in_aexp ind
R52626:52627 Equiv <> a1 var
prf 52718:52732 <> aeval_weakening
R52810:52812 Coq.Init.Logic <> :type_scope:x_'='_x not
R52786:52790 Imp <> aeval def
R52809:52809 Equiv <> a var
R52793:52798 Imp <> update def
R52805:52806 Equiv <> ni var
R52803:52803 Equiv <> i var
R52800:52801 Equiv <> st var
R52813:52817 Imp <> aeval def
R52822:52822 Equiv <> a var
R52819:52820 Equiv <> st var
R52756:52775 Equiv <> var_not_used_in_aexp ind
R52779:52779 Equiv <> a var
R52777:52777 Equiv <> i var
R53212:53214 Coq.Init.Logic <> :type_scope:x_'='_x not
R53194:53199 Imp <> update def
R53212:53214 Coq.Init.Logic <> :type_scope:x_'='_x not
R53194:53199 Imp <> update def
R53264:53273 Imp <> update_neq thm
R53264:53273 Imp <> update_neq thm
R53288:53306 SfLib <> not_eq_beq_id_false thm
R53288:53306 SfLib <> not_eq_beq_id_false thm
prf 53474:53484 <> aeval_subst
R53576:53580 Coq.Init.Logic <> :type_scope:x_'='_x not
R53540:53544 Imp <> aeval def
R53574:53575 Equiv <> a2 var
R53547:53552 Imp <> update def
R53560:53564 Imp <> aeval def
R53569:53570 Equiv <> a1 var
R53566:53567 Equiv <> st var
R53557:53557 Equiv <> i var
R53554:53555 Equiv <> st var
R53581:53585 Imp <> aeval def
R53616:53625 Equiv <> subst_aexp def
R53632:53633 Equiv <> a2 var
R53629:53630 Equiv <> a1 var
R53627:53627 Equiv <> i var
R53588:53593 Imp <> update def
R53601:53605 Imp <> aeval def
R53610:53611 Equiv <> a1 var
R53607:53608 Equiv <> st var
R53598:53598 Equiv <> i var
R53595:53596 Equiv <> st var
R53509:53528 Equiv <> var_not_used_in_aexp ind
R53532:53533 Equiv <> a1 var
R53530:53530 Equiv <> i var
R53909:53918 Equiv <> subst_aexp def
R53935:53940 SfLib <> beq_id def
R53935:53940 SfLib <> beq_id def
R54040:54042 Coq.Init.Logic <> :type_scope:x_'='_x not
R54004:54008 Imp <> aeval def
R54011:54016 Imp <> update def
R54024:54028 Imp <> aeval def
R54043:54047 Imp <> aeval def
R54040:54042 Coq.Init.Logic <> :type_scope:x_'='_x not
R54004:54008 Imp <> aeval def
R54011:54016 Imp <> update def
R54024:54028 Imp <> aeval def
R54043:54047 Imp <> aeval def
R54103:54117 Equiv <> aeval_weakening thm
R54103:54117 Equiv <> aeval_weakening thm
R54164:54172 SfLib <> beq_id_eq thm
R54164:54172 SfLib <> beq_id_eq thm
R54206:54211 Imp <> update def
R54232:54242 SfLib <> beq_id_refl thm
R54232:54242 SfLib <> beq_id_refl thm
prf 54313:54323 <> subst_equiv
R54381:54386 Equiv <> cequiv def
R54430:54431 Imp <> ::x_';'_x not
R54423:54427 Imp <> ::x_'::='_x not
R54421:54422 Equiv <> i1 var
R54428:54429 Equiv <> a1 var
R54434:54438 Imp <> ::x_'::='_x not
R54432:54433 Equiv <> i2 var
R54439:54448 Equiv <> subst_aexp def
R54456:54457 Equiv <> a2 var
R54453:54454 Equiv <> a1 var
R54450:54451 Equiv <> i1 var
R54398:54399 Imp <> ::x_';'_x not
R54391:54395 Imp <> ::x_'::='_x not
R54389:54390 Equiv <> i1 var
R54396:54397 Equiv <> a1 var
R54402:54406 Imp <> ::x_'::='_x not
R54400:54401 Equiv <> i2 var
R54407:54408 Equiv <> a2 var
R54349:54368 Equiv <> var_not_used_in_aexp ind
R54373:54374 Equiv <> a1 var
R54370:54371 Equiv <> i1 var
R54477:54482 Equiv <> cequiv def
R54578:54582 Imp <> E_Seq constr
R54578:54582 Imp <> E_Seq constr
R54642:54646 Imp <> E_Ass constr
R54642:54646 Imp <> E_Ass constr
R54690:54700 Equiv <> aeval_subst thm
R54690:54700 Equiv <> aeval_subst thm
R54768:54772 Imp <> E_Seq constr
R54768:54772 Imp <> E_Seq constr
R54832:54836 Imp <> E_Ass constr
R54832:54836 Imp <> E_Ass constr
R54870:54880 Equiv <> aeval_subst thm
R54870:54880 Equiv <> aeval_subst thm
prf 55047:55062 <> inequiv_exercise
R55068:55069 Coq.Init.Logic <> :type_scope:'~'_x not
R55070:55075 Equiv <> cequiv def
R55103:55106 Imp <> ::'SKIP' not
R55078:55083 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55089:55092 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55097:55100 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55084:55088 Imp <> BTrue constr
R55093:55096 Imp <> ::'SKIP' not
R55162:55163 Coq.Init.Logic <> :type_scope:'~'_x not
R55218:55218 Coq.Init.Logic <> :type_scope:'~'_x not
R55164:55164 Imp <> ::x_'/'_x_'||'_x not
R55188:55191 Imp <> ::x_'/'_x_'||'_x not
R55203:55206 Imp <> ::x_'/'_x_'||'_x not
R55165:55170 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55176:55179 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55184:55187 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55171:55175 Imp <> BTrue constr
R55180:55183 Imp <> ::'SKIP' not
R55192:55202 Imp <> empty_state def
R55207:55217 Imp <> empty_state def
R55162:55163 Coq.Init.Logic <> :type_scope:'~'_x not
R55218:55218 Coq.Init.Logic <> :type_scope:'~'_x not
R55164:55164 Imp <> ::x_'/'_x_'||'_x not
R55188:55191 Imp <> ::x_'/'_x_'||'_x not
R55203:55206 Imp <> ::x_'/'_x_'||'_x not
R55165:55170 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55176:55179 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55184:55187 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R55171:55175 Imp <> BTrue constr
R55180:55183 Imp <> ::'SKIP' not
R55192:55202 Imp <> empty_state def
R55207:55217 Imp <> empty_state def
R55238:55255 Equiv <> WHILE_true_nonterm thm
R55238:55255 Equiv <> WHILE_true_nonterm thm
R55264:55274 Equiv <> refl_bequiv thm
R55264:55274 Equiv <> refl_bequiv thm
R55317:55327 Imp <> empty_state def
R55305:55315 Imp <> empty_state def
R55317:55327 Imp <> empty_state def
R55305:55315 Imp <> empty_state def
R55340:55345 Imp <> E_Skip constr
R55340:55345 Imp <> E_Skip constr
mod 57341:57344 <> Himp
ind 57449:57451 Himp com
constr 57467:57471 Himp CSkip
constr 57483:57486 Himp CAss
constr 57512:57515 Himp CSeq
constr 57541:57543 Himp CIf
constr 57577:57582 Himp CWhile
constr 57609:57614 Himp CHavoc
R57475:57477 Equiv <> com ind
R57504:57506 Equiv <> com ind
R57496:57499 Imp <> aexp ind
R57490:57491 SfLib <> id ind
R57533:57535 Equiv <> com ind
R57526:57528 Equiv <> com ind
R57519:57521 Equiv <> com ind
R57569:57571 Equiv <> com ind
R57562:57564 Equiv <> com ind
R57555:57557 Equiv <> com ind
R57547:57550 Imp <> bexp ind
R57601:57603 Equiv <> com ind
R57594:57596 Equiv <> com ind
R57586:57589 Imp <> bexp ind
R57624:57626 Equiv <> com ind
R57618:57619 SfLib <> id ind
R57872:57876 Equiv Himp CSkip constr
not 57858 Himp ::'SKIP'
R57906:57909 Equiv Himp CAss constr
not 57888 Himp ::x_'::='_x
R57956:57959 Equiv Himp CSeq constr
not 57940 Himp ::x_';'_x
R58044:58049 Equiv Himp CWhile constr
not 58013 Himp ::'WHILE'_x_'DO'_x_'END'
R58143:58145 Equiv Himp CIf constr
not 58101 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R58218:58223 Equiv Himp CHavoc constr
not 58202 Himp ::'HAVOC'_x
ind 58633:58637 Himp ceval
constr 58678:58683 Himp E_Skip
constr 58726:58730 Himp E_Ass
constr 58854:58858 Himp E_Seq
constr 58983:58990 Himp E_IfTrue
constr 59159:59167 Himp E_IfFalse
constr 59339:59348 Himp E_WhileEnd
constr 59472:59482 Himp E_WhileLoop
constr 59743:59749 Himp E_Havoc
R58657:58661 Imp <> state def
R58648:58652 Imp <> state def
R58641:58643 Equiv Himp com ind
R59873:59877 Equiv <> ceval ind
R58699:58703 Imp <> state def
R58710:58712 Equiv Himp ::x_'/'_x_'||'_x not
R58715:58718 Equiv Himp ::x_'/'_x_'||'_x not
R58706:58709 Equiv Himp ::'SKIP' not
R58713:58714 Equiv <> st var
R58719:58720 Equiv <> st var
R58747:58751 Imp <> state def
R58760:58763 Imp <> aexp ind
R58771:58773 Coq.Init.Datatypes <> nat ind
R58781:58782 SfLib <> id ind
R58817:58817 Equiv Himp ::x_'/'_x_'||'_x not
R58826:58829 Equiv Himp ::x_'/'_x_'||'_x not
R58832:58835 Equiv Himp ::x_'/'_x_'||'_x not
R58819:58823 Equiv Himp ::x_'::='_x not
R58818:58818 Equiv <> X var
R58824:58825 Equiv <> a1 var
R58830:58831 Equiv <> st var
R58836:58841 Imp <> update def
R58848:58848 Equiv <> n var
R58846:58846 Equiv <> X var
R58843:58844 Equiv <> st var
R58809:58811 Coq.Init.Logic <> :type_scope:x_'='_x not
R58798:58802 Imp <> aeval def
R58807:58808 Equiv <> a1 var
R58804:58805 Equiv <> st var
R58812:58812 Equiv <> n var
R58878:58880 Equiv Himp com ind
R58898:58902 Imp <> state def
R58956:58956 Equiv Himp ::x_'/'_x_'||'_x not
R58964:58967 Equiv Himp ::x_'/'_x_'||'_x not
R58970:58973 Equiv Himp ::x_'/'_x_'||'_x not
R58959:58961 Equiv Himp ::x_';'_x not
R58957:58958 Equiv <> c1 var
R58962:58963 Equiv <> c2 var
R58968:58969 Equiv <> st var
R58974:58977 Equiv <> st'' var
R58938:58940 Equiv Himp ::x_'/'_x_'||'_x not
R58944:58947 Equiv Himp ::x_'/'_x_'||'_x not
R58936:58937 Equiv <> c2 var
R58941:58943 Equiv <> st' var
R58948:58951 Equiv <> st'' var
R58920:58922 Equiv Himp ::x_'/'_x_'||'_x not
R58925:58928 Equiv Himp ::x_'/'_x_'||'_x not
R58918:58919 Equiv <> c1 var
R58923:58924 Equiv <> st var
R58929:58931 Equiv <> st' var
R59011:59015 Imp <> state def
R59024:59027 Imp <> bexp ind
R59039:59041 Equiv Himp com ind
R59115:59115 Equiv Himp ::x_'/'_x_'||'_x not
R59141:59144 Equiv Himp ::x_'/'_x_'||'_x not
R59147:59150 Equiv Himp ::x_'/'_x_'||'_x not
R59116:59119 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59122:59127 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59130:59135 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59138:59140 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59120:59121 Equiv <> b1 var
R59128:59129 Equiv <> c1 var
R59136:59137 Equiv <> c2 var
R59145:59146 Equiv <> st var
R59151:59153 Equiv <> st' var
R59099:59101 Equiv Himp ::x_'/'_x_'||'_x not
R59104:59107 Equiv Himp ::x_'/'_x_'||'_x not
R59097:59098 Equiv <> c1 var
R59102:59103 Equiv <> st var
R59108:59110 Equiv <> st' var
R59071:59073 Coq.Init.Logic <> :type_scope:x_'='_x not
R59060:59064 Imp <> beval def
R59069:59070 Equiv <> b1 var
R59066:59067 Equiv <> st var
R59074:59077 Coq.Init.Datatypes <> true constr
R59188:59192 Imp <> state def
R59201:59204 Imp <> bexp ind
R59216:59218 Equiv Himp com ind
R59295:59295 Equiv Himp ::x_'/'_x_'||'_x not
R59321:59324 Equiv Himp ::x_'/'_x_'||'_x not
R59327:59330 Equiv Himp ::x_'/'_x_'||'_x not
R59296:59299 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59302:59307 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59310:59315 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59318:59320 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R59300:59301 Equiv <> b1 var
R59308:59309 Equiv <> c1 var
R59316:59317 Equiv <> c2 var
R59325:59326 Equiv <> st var
R59331:59333 Equiv <> st' var
R59279:59281 Equiv Himp ::x_'/'_x_'||'_x not
R59284:59287 Equiv Himp ::x_'/'_x_'||'_x not
R59277:59278 Equiv <> c2 var
R59282:59283 Equiv <> st var
R59288:59290 Equiv <> st' var
R59249:59251 Coq.Init.Logic <> :type_scope:x_'='_x not
R59238:59242 Imp <> beval def
R59247:59248 Equiv <> b1 var
R59244:59245 Equiv <> st var
R59252:59256 Coq.Init.Datatypes <> false constr
R59365:59368 Imp <> bexp ind
R59377:59381 Imp <> state def
R59390:59392 Equiv Himp com ind
R59436:59436 Equiv Himp ::x_'/'_x_'||'_x not
R59455:59458 Equiv Himp ::x_'/'_x_'||'_x not
R59461:59464 Equiv Himp ::x_'/'_x_'||'_x not
R59437:59442 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59445:59448 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59451:59454 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59443:59444 Equiv <> b1 var
R59449:59450 Equiv <> c1 var
R59459:59460 Equiv <> st var
R59465:59466 Equiv <> st var
R59424:59426 Coq.Init.Logic <> :type_scope:x_'='_x not
R59413:59417 Imp <> beval def
R59422:59423 Equiv <> b1 var
R59419:59420 Equiv <> st var
R59427:59431 Coq.Init.Datatypes <> false constr
R59508:59512 Imp <> state def
R59521:59524 Imp <> bexp ind
R59533:59535 Equiv Himp com ind
R59689:59689 Equiv Himp ::x_'/'_x_'||'_x not
R59708:59711 Equiv Himp ::x_'/'_x_'||'_x not
R59714:59717 Equiv Himp ::x_'/'_x_'||'_x not
R59690:59695 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59698:59701 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59704:59707 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59696:59697 Equiv <> b1 var
R59702:59703 Equiv <> c1 var
R59712:59713 Equiv <> st var
R59718:59721 Equiv <> st'' var
R59633:59633 Equiv Himp ::x_'/'_x_'||'_x not
R59652:59655 Equiv Himp ::x_'/'_x_'||'_x not
R59659:59662 Equiv Himp ::x_'/'_x_'||'_x not
R59634:59639 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59642:59645 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59648:59651 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59640:59641 Equiv <> b1 var
R59646:59647 Equiv <> c1 var
R59656:59658 Equiv <> st' var
R59663:59666 Equiv <> st'' var
R59599:59601 Equiv Himp ::x_'/'_x_'||'_x not
R59604:59607 Equiv Himp ::x_'/'_x_'||'_x not
R59597:59598 Equiv <> c1 var
R59602:59603 Equiv <> st var
R59608:59610 Equiv <> st' var
R59568:59570 Coq.Init.Logic <> :type_scope:x_'='_x not
R59557:59561 Imp <> beval def
R59566:59567 Equiv <> b1 var
R59563:59564 Equiv <> st var
R59571:59574 Coq.Init.Datatypes <> true constr
R59766:59770 Imp <> state def
R59778:59779 SfLib <> id ind
R59787:59789 Coq.Init.Datatypes <> nat ind
R59807:59807 Equiv Himp ::x_'/'_x_'||'_x not
R59815:59818 Equiv Himp ::x_'/'_x_'||'_x not
R59821:59824 Equiv Himp ::x_'/'_x_'||'_x not
R59808:59813 Equiv Himp ::'HAVOC'_x not
R59814:59814 Equiv <> X var
R59819:59820 Equiv <> st var
R59825:59830 Imp <> update def
R59837:59837 Equiv <> n var
R59835:59835 Equiv <> X var
R59832:59833 Equiv <> st var
R59873:59877 Equiv Himp ceval ind
not 59848 Himp ::x_'/'_x_'||'_x
def 60273:60286 Himp havoc_example1
R60290:60290 Equiv Himp ::x_'/'_x_'||'_x not
R60298:60301 Equiv Himp ::x_'/'_x_'||'_x not
R60313:60316 Equiv Himp ::x_'/'_x_'||'_x not
R60291:60296 Equiv Himp ::'HAVOC'_x not
R60297:60297 Imp <> X def
R60302:60312 Imp <> empty_state def
R60317:60322 Imp <> update def
R60336:60336 Imp <> X def
R60324:60334 Imp <> empty_state def
def 60393:60406 Himp havoc_example2
R60412:60412 Equiv Himp ::x_'/'_x_'||'_x not
R60426:60429 Equiv Himp ::x_'/'_x_'||'_x not
R60441:60444 Equiv Himp ::x_'/'_x_'||'_x not
R60417:60418 Equiv Himp ::x_';'_x not
R60413:60416 Equiv Himp ::'SKIP' not
R60419:60424 Equiv Himp ::'HAVOC'_x not
R60425:60425 Imp <> Z def
R60430:60440 Imp <> empty_state def
R60445:60450 Imp <> update def
R60464:60464 Imp <> Z def
R60452:60462 Imp <> empty_state def
R60502:60506 Equiv Himp E_Seq constr
R60502:60506 Equiv Himp E_Seq constr
def 60626:60631 Himp cequiv
R60642:60644 Equiv Himp com ind
R60673:60677 Imp <> state def
R60696:60700 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R60684:60686 Equiv Himp ::x_'/'_x_'||'_x not
R60689:60692 Equiv Himp ::x_'/'_x_'||'_x not
R60682:60683 Equiv <> c1 var
R60687:60688 Equiv <> st var
R60693:60695 Equiv <> st' var
R60703:60705 Equiv Himp ::x_'/'_x_'||'_x not
R60708:60711 Equiv Himp ::x_'/'_x_'||'_x not
R60701:60702 Equiv <> c2 var
R60706:60707 Equiv <> st var
R60712:60714 Equiv <> st' var
def 61014:61016 Himp pXY
R61030:61031 Equiv Himp ::x_';'_x not
R61023:61028 Equiv Himp ::'HAVOC'_x not
R61029:61029 Imp <> X def
R61032:61037 Equiv Himp ::'HAVOC'_x not
R61038:61038 Imp <> Y def
def 61053:61055 Himp pYX
R61069:61070 Equiv Himp ::x_';'_x not
R61062:61067 Equiv Himp ::'HAVOC'_x not
R61068:61068 Imp <> Y def
R61071:61076 Equiv Himp ::'HAVOC'_x not
R61077:61077 Imp <> X def
prf 61185:61198 Himp pXY_approx_pYX
R61291:61291 Equiv Himp ::x_'/'_x_'||'_x not
R61308:61311 Equiv Himp ::x_'/'_x_'||'_x not
R61314:61317 Equiv Himp ::x_'/'_x_'||'_x not
R61299:61300 Equiv Himp ::x_';'_x not
R61292:61297 Equiv Himp ::'HAVOC'_x not
R61298:61298 Equiv <> Y var
R61301:61306 Equiv Himp ::'HAVOC'_x not
R61307:61307 Equiv <> X var
R61312:61313 Equiv <> st var
R61318:61320 Equiv <> st' var
R61253:61253 Equiv Himp ::x_'/'_x_'||'_x not
R61270:61273 Equiv Himp ::x_'/'_x_'||'_x not
R61276:61279 Equiv Himp ::x_'/'_x_'||'_x not
R61261:61262 Equiv Himp ::x_';'_x not
R61254:61259 Equiv Himp ::'HAVOC'_x not
R61260:61260 Equiv <> X var
R61263:61268 Equiv Himp ::'HAVOC'_x not
R61269:61269 Equiv <> Y var
R61274:61275 Equiv <> st var
R61280:61282 Equiv <> st' var
R61237:61239 Coq.Init.Logic <> :type_scope:x_'='_x not
R61227:61232 SfLib <> beq_id def
R61236:61236 Equiv <> Y var
R61234:61234 Equiv <> X var
R61240:61244 Coq.Init.Datatypes <> false constr
R61482:61487 Imp <> update def
R61463:61467 Equiv Himp E_Seq constr
R61482:61487 Imp <> update def
R61463:61467 Equiv Himp E_Seq constr
R61523:61528 Imp <> update def
R61531:61536 Imp <> update def
R61562:61567 Imp <> update def
R61570:61575 Imp <> update def
R61562:61567 Imp <> update def
R61570:61575 Imp <> update def
R61523:61528 Imp <> update def
R61531:61536 Imp <> update def
R61613:61637 Equiv Himp functional_extensionality prfax
R61613:61637 Equiv Himp functional_extensionality prfax
R61662:61675 Imp <> update_permute thm
R61662:61675 Imp <> update_permute thm
prf 61719:61732 Himp pXY_cequiv_pYX
R61752:61755 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R61738:61743 Equiv Himp cequiv def
R61749:61751 Equiv Himp pYX def
R61745:61747 Equiv Himp pXY def
R61756:61756 Coq.Init.Logic <> :type_scope:'~'_x not
R61757:61762 Equiv Himp cequiv def
R61768:61770 Equiv Himp pYX def
R61764:61766 Equiv Himp pXY def
R61834:61847 Equiv Himp pXY_approx_pYX thm
R61834:61847 Equiv Himp pXY_approx_pYX thm
R61834:61847 Equiv Himp pXY_approx_pYX thm
def 61984:61989 Himp ptwice
R62003:62004 Equiv Himp ::x_';'_x not
R61996:62001 Equiv Himp ::'HAVOC'_x not
R62002:62002 Imp <> X def
R62005:62010 Equiv Himp ::'HAVOC'_x not
R62011:62011 Imp <> Y def
def 62026:62030 Himp pcopy
R62044:62045 Equiv Himp ::x_';'_x not
R62037:62042 Equiv Himp ::'HAVOC'_x not
R62043:62043 Imp <> X def
R62047:62051 Equiv Himp ::x_'::='_x not
R62046:62046 Imp <> Y def
R62052:62054 Imp <> AId constr
R62056:62056 Imp <> X def
prf 62227:62245 Himp ptwice_cequiv_pcopy
R62270:62273 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R62251:62256 Equiv Himp cequiv def
R62265:62269 Equiv Himp pcopy def
R62258:62263 Equiv Himp ptwice def
R62274:62274 Coq.Init.Logic <> :type_scope:'~'_x not
R62275:62280 Equiv Himp cequiv def
R62289:62293 Equiv Himp pcopy def
R62282:62287 Equiv Himp ptwice def
R62345:62350 Equiv Himp cequiv def
R62375:62377 Equiv Himp ::x_'/'_x_'||'_x not
R62389:62392 Equiv Himp ::x_'/'_x_'||'_x not
R62369:62374 Equiv Himp ptwice def
R62378:62388 Imp <> empty_state def
R62393:62398 Imp <> update def
R62425:62425 Imp <> Y def
R62401:62406 Imp <> update def
R62420:62420 Imp <> X def
R62408:62418 Imp <> empty_state def
R62375:62377 Equiv Himp ::x_'/'_x_'||'_x not
R62389:62392 Equiv Himp ::x_'/'_x_'||'_x not
R62369:62374 Equiv Himp ptwice def
R62378:62388 Imp <> empty_state def
R62393:62398 Imp <> update def
R62425:62425 Imp <> Y def
R62401:62406 Imp <> update def
R62420:62420 Imp <> X def
R62408:62418 Imp <> empty_state def
R62453:62458 Imp <> update def
R62472:62472 Imp <> X def
R62460:62470 Imp <> empty_state def
R62441:62445 Equiv Himp E_Seq constr
R62453:62458 Imp <> update def
R62472:62472 Imp <> X def
R62460:62470 Imp <> empty_state def
R62441:62445 Equiv Himp E_Seq constr
R62582:62590 Imp <> update_eq thm
R62582:62590 Imp <> update_eq thm
R62612:62617 Imp <> update def
R62644:62644 Imp <> Y def
R62620:62625 Imp <> update def
R62639:62639 Imp <> X def
R62627:62637 Imp <> empty_state def
R62612:62617 Imp <> update def
R62644:62644 Imp <> Y def
R62620:62625 Imp <> update def
R62639:62639 Imp <> X def
R62627:62637 Imp <> empty_state def
R62667:62672 Imp <> update def
R62699:62699 Imp <> Y def
R62675:62680 Imp <> update def
R62694:62694 Imp <> X def
R62682:62692 Imp <> empty_state def
R62667:62672 Imp <> update def
R62699:62699 Imp <> Y def
R62675:62680 Imp <> update def
R62694:62694 Imp <> X def
R62682:62692 Imp <> empty_state def
R62722:62724 Coq.Init.Logic <> :type_scope:x_'='_x not
R62721:62721 Imp <> X def
R62727:62727 Imp <> X def
R62722:62724 Coq.Init.Logic <> :type_scope:x_'='_x not
R62721:62721 Imp <> X def
R62727:62727 Imp <> X def
R62775:62777 Coq.Init.Logic <> :type_scope:x_'='_x not
R62774:62774 Imp <> Y def
R62780:62780 Imp <> Y def
R62775:62777 Coq.Init.Logic <> :type_scope:x_'='_x not
R62774:62774 Imp <> Y def
R62780:62780 Imp <> Y def
R62841:62850 Imp <> update_neq thm
R62901:62909 Imp <> update_eq thm
R62841:62850 Imp <> update_neq thm
R62901:62909 Imp <> update_eq thm
R62841:62850 Imp <> update_neq thm
R62901:62909 Imp <> update_eq thm
R62841:62850 Imp <> update_neq thm
R62937:62945 Imp <> update_eq thm
R62937:62945 Imp <> update_eq thm
R62937:62945 Imp <> update_eq thm
R62937:62945 Imp <> update_eq thm
def 63791:63792 Himp p1
R63796:63798 Equiv Himp com ind
R63805:63811 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R63839:63847 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R63889:63894 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R63812:63815 Imp <> BNot constr
R63818:63820 Imp <> BEq constr
R63831:63834 Imp <> ANum constr
R63823:63825 Imp <> AId constr
R63827:63827 Imp <> X def
R63855:63860 Equiv Himp ::x_';'_x not
R63848:63853 Equiv Himp ::'HAVOC'_x not
R63854:63854 Imp <> Y def
R63862:63866 Equiv Himp ::x_'::='_x not
R63861:63861 Imp <> X def
R63867:63871 Imp <> APlus constr
R63882:63885 Imp <> ANum constr
R63874:63876 Imp <> AId constr
R63878:63878 Imp <> X def
def 63909:63910 Himp p2
R63914:63916 Equiv Himp com ind
R63923:63929 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R63957:63965 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R63970:63975 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R63930:63933 Imp <> BNot constr
R63936:63938 Imp <> BEq constr
R63949:63952 Imp <> ANum constr
R63941:63943 Imp <> AId constr
R63945:63945 Imp <> X def
R63966:63969 Equiv Himp ::'SKIP' not
prf 63986:63999 Himp p1_may_diverge
R64033:64034 Coq.Init.Logic <> :type_scope:'~'_x not
R64037:64039 Equiv Himp ::x_'/'_x_'||'_x not
R64042:64045 Equiv Himp ::x_'/'_x_'||'_x not
R64035:64036 Equiv Himp p1 def
R64040:64041 Equiv <> st var
R64046:64048 Equiv <> st' var
R64022:64025 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R64018:64019 Equiv <> st var
R64021:64021 Imp <> X def
R64093:64094 Equiv Himp p1 def
R64093:64094 Equiv Himp p1 def
R64235:64248 Coq.Bool.Bool <> negb_false_iff thm
R64235:64248 Coq.Bool.Bool <> negb_false_iff thm
R64279:64288 Coq.Arith.EqNat <> beq_nat_eq def
R64279:64288 Coq.Arith.EqNat <> beq_nat_eq def
R64476:64481 Imp <> update def
prf 64510:64523 Himp p2_may_diverge
R64557:64558 Coq.Init.Logic <> :type_scope:'~'_x not
R64561:64563 Equiv Himp ::x_'/'_x_'||'_x not
R64566:64569 Equiv Himp ::x_'/'_x_'||'_x not
R64559:64560 Equiv Himp p2 def
R64564:64565 Equiv <> st var
R64570:64572 Equiv <> st' var
R64546:64549 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R64542:64543 Equiv <> st var
R64545:64545 Imp <> X def
R64617:64618 Equiv Himp p2 def
R64617:64618 Equiv Himp p2 def
R64759:64772 Coq.Bool.Bool <> negb_false_iff thm
R64759:64772 Coq.Bool.Bool <> negb_false_iff thm
R64803:64812 Coq.Arith.EqNat <> beq_nat_eq def
R64803:64812 Coq.Arith.EqNat <> beq_nat_eq def
prf 64977:64987 Himp p1_p2_equiv
R64991:64996 Equiv Himp cequiv def
R65001:65002 Equiv Himp p2 def
R64998:64999 Equiv Himp p1 def
R65058:65059 Equiv Himp p1 def
R65058:65059 Equiv Himp p1 def
R65162:65171 Equiv Himp E_WhileEnd constr
R65162:65171 Equiv Himp E_WhileEnd constr
R65218:65231 Equiv Himp p1_may_diverge thm
R65218:65231 Equiv Himp p1_may_diverge thm
R65288:65300 Coq.Bool.Bool <> negb_true_iff thm
R65288:65300 Coq.Bool.Bool <> negb_true_iff thm
R65314:65326 Coq.Arith.EqNat <> beq_nat_false thm
R65314:65326 Coq.Arith.EqNat <> beq_nat_false thm
R65424:65429 Imp <> update def
R65459:65460 Equiv Himp p2 def
R65459:65460 Equiv Himp p2 def
R65563:65572 Equiv Himp E_WhileEnd constr
R65563:65572 Equiv Himp E_WhileEnd constr
R65619:65632 Equiv Himp p2_may_diverge thm
R65619:65632 Equiv Himp p2_may_diverge thm
R65689:65701 Coq.Bool.Bool <> negb_true_iff thm
R65689:65701 Coq.Bool.Bool <> negb_true_iff thm
R65715:65727 Coq.Arith.EqNat <> beq_nat_false thm
R65715:65727 Coq.Arith.EqNat <> beq_nat_false thm
def 65793:65794 Himp p3
R65798:65800 Equiv Himp com ind
R65819:65822 Equiv Himp ::x_';'_x not
R65808:65812 Equiv Himp ::x_'::='_x not
R65807:65807 Imp <> Z def
R65813:65816 Imp <> ANum constr
R65823:65829 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R65857:65865 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R65886:65891 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R65830:65833 Imp <> BNot constr
R65836:65838 Imp <> BEq constr
R65849:65852 Imp <> ANum constr
R65841:65843 Imp <> AId constr
R65845:65845 Imp <> X def
R65873:65878 Equiv Himp ::x_';'_x not
R65866:65871 Equiv Himp ::'HAVOC'_x not
R65872:65872 Imp <> X def
R65879:65884 Equiv Himp ::'HAVOC'_x not
R65885:65885 Imp <> Z def
def 65906:65907 Himp p4
R65911:65913 Equiv Himp com ind
R65934:65937 Equiv Himp ::x_';'_x not
R65921:65926 Equiv Himp ::x_'::='_x not
R65933:65933 Equiv Himp ::x_'::='_x not
R65920:65920 Imp <> X def
R65927:65930 Imp <> ANum constr
R65939:65944 Equiv Himp ::x_'::='_x not
R65951:65951 Equiv Himp ::x_'::='_x not
R65938:65938 Imp <> Z def
R65945:65948 Imp <> ANum constr
prf 66156:66168 Himp p3_p4_inequiv
R66172:66173 Coq.Init.Logic <> :type_scope:'~'_x not
R66174:66179 Equiv Himp cequiv def
R66184:66185 Equiv Himp p4 def
R66181:66182 Equiv Himp p3 def
R66238:66243 Equiv Himp cequiv def
R66269:66274 Imp <> update def
R66288:66288 Imp <> X def
R66276:66286 Imp <> empty_state def
R66269:66274 Imp <> update def
R66288:66288 Imp <> X def
R66276:66286 Imp <> empty_state def
R66312:66314 Equiv Himp ::x_'/'_x_'||'_x not
R66317:66320 Equiv Himp ::x_'/'_x_'||'_x not
R66310:66311 Equiv Himp p3 def
R66321:66326 Imp <> update def
R66357:66357 Imp <> Z def
R66329:66334 Imp <> update def
R66352:66352 Imp <> X def
R66337:66342 Imp <> update def
R66347:66347 Imp <> Z def
R66312:66314 Equiv Himp ::x_'/'_x_'||'_x not
R66317:66320 Equiv Himp ::x_'/'_x_'||'_x not
R66310:66311 Equiv Himp p3 def
R66321:66326 Imp <> update def
R66357:66357 Imp <> Z def
R66329:66334 Imp <> update def
R66352:66352 Imp <> X def
R66337:66342 Imp <> update def
R66347:66347 Imp <> Z def
R66374:66378 Equiv Himp E_Seq constr
R66374:66378 Equiv Himp E_Seq constr
R66423:66433 Equiv Himp E_WhileLoop constr
R66423:66433 Equiv Himp E_WhileLoop constr
R66471:66475 Equiv Himp E_Seq constr
R66471:66475 Equiv Himp E_Seq constr
R66501:66510 Equiv Himp E_WhileEnd constr
R66501:66510 Equiv Himp E_WhileEnd constr
R66649:66654 Imp <> update def
R66694:66694 Imp <> Z def
R66657:66662 Imp <> update def
R66689:66689 Imp <> X def
R66665:66670 Imp <> update def
R66684:66684 Imp <> X def
R66672:66682 Imp <> empty_state def
R66649:66654 Imp <> update def
R66694:66694 Imp <> Z def
R66657:66662 Imp <> update def
R66689:66689 Imp <> X def
R66665:66670 Imp <> update def
R66684:66684 Imp <> X def
R66672:66682 Imp <> empty_state def
R66719:66724 Imp <> update def
R66777:66777 Imp <> Z def
R66727:66732 Imp <> update def
R66772:66772 Imp <> X def
R66735:66740 Imp <> update def
R66767:66767 Imp <> Z def
R66743:66748 Imp <> update def
R66762:66762 Imp <> X def
R66750:66760 Imp <> empty_state def
R66719:66724 Imp <> update def
R66777:66777 Imp <> Z def
R66727:66732 Imp <> update def
R66772:66772 Imp <> X def
R66735:66740 Imp <> update def
R66767:66767 Imp <> Z def
R66743:66748 Imp <> update def
R66762:66762 Imp <> X def
R66750:66760 Imp <> empty_state def
R66805:66807 Coq.Init.Logic <> :type_scope:x_'='_x not
R66804:66804 Imp <> Z def
R66812:66812 Imp <> Z def
R66805:66807 Coq.Init.Logic <> :type_scope:x_'='_x not
R66804:66804 Imp <> Z def
R66812:66812 Imp <> Z def
def 66884:66885 Himp p5
R66889:66891 Equiv Himp com ind
R66898:66904 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R66932:66940 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R66948:66953 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R66905:66908 Imp <> BNot constr
R66911:66913 Imp <> BEq constr
R66924:66927 Imp <> ANum constr
R66916:66918 Imp <> AId constr
R66920:66920 Imp <> X def
R66941:66946 Equiv Himp ::'HAVOC'_x not
R66947:66947 Imp <> X def
def 66968:66969 Himp p6
R66973:66975 Equiv Himp com ind
R66983:66987 Equiv Himp ::x_'::='_x not
R66982:66982 Imp <> X def
R66988:66991 Imp <> ANum constr
prf 68100:68109 Himp p5_summary
R68149:68151 Coq.Init.Logic <> :type_scope:x_'='_x not
R68146:68148 Equiv <> st' var
R68152:68157 Imp <> update def
R68162:68162 Imp <> X def
R68159:68160 Equiv <> st var
R68130:68132 Equiv Himp ::x_'/'_x_'||'_x not
R68135:68138 Equiv Himp ::x_'/'_x_'||'_x not
R68128:68129 Equiv Himp p5 def
R68133:68134 Equiv <> st var
R68139:68141 Equiv <> st' var
R68194:68195 Equiv Himp p5 def
R68194:68195 Equiv Himp p5 def
R68307:68320 Coq.Bool.Bool <> negb_false_iff thm
R68307:68320 Coq.Bool.Bool <> negb_false_iff thm
R68334:68345 Coq.Arith.EqNat <> beq_nat_true thm
R68334:68345 Coq.Arith.EqNat <> beq_nat_true thm
R68363:68387 Equiv Himp functional_extensionality prfax
R68363:68387 Equiv Himp functional_extensionality prfax
R68409:68419 Imp <> update_same thm
R68409:68419 Imp <> update_same thm
R68489:68491 Coq.Init.Logic <> :type_scope:x_'='_x not
R68492:68497 Imp <> update def
R68503:68503 Imp <> X def
R68489:68491 Coq.Init.Logic <> :type_scope:x_'='_x not
R68492:68497 Imp <> update def
R68503:68503 Imp <> X def
R68575:68599 Equiv Himp functional_extensionality prfax
R68625:68637 Imp <> update_shadow thm
R68575:68599 Equiv Himp functional_extensionality prfax
R68625:68637 Imp <> update_shadow thm
prf 68667:68677 Himp p5_p6_equiv
R68681:68686 Equiv Himp cequiv def
R68691:68692 Equiv Himp p6 def
R68688:68689 Equiv Himp p5 def
R68758:68767 Equiv Himp p5_summary thm
R68758:68767 Equiv Himp p5_summary thm
R68878:68884 Coq.Arith.EqNat <> beq_nat def
R68890:68890 Imp <> X def
R68878:68884 Coq.Arith.EqNat <> beq_nat def
R68890:68890 Imp <> X def
R68945:68954 Coq.Arith.EqNat <> beq_nat_eq def
R68945:68954 Coq.Arith.EqNat <> beq_nat_eq def
R68981:68983 Coq.Init.Logic <> :type_scope:x_'='_x not
R68984:68989 Imp <> update def
R68994:68994 Imp <> X def
R68981:68983 Coq.Init.Logic <> :type_scope:x_'='_x not
R68984:68989 Imp <> update def
R68994:68994 Imp <> X def
R69014:69038 Equiv Himp functional_extensionality prfax
R69014:69038 Equiv Himp functional_extensionality prfax
R69068:69078 Imp <> update_same thm
R69068:69078 Imp <> update_same thm
R69133:69142 Equiv Himp E_WhileEnd constr
R69133:69142 Equiv Himp E_WhileEnd constr
R69239:69244 Imp <> update def
R69249:69249 Imp <> X def
R69214:69224 Equiv Himp E_WhileLoop constr
R69239:69244 Imp <> update def
R69249:69249 Imp <> X def
R69214:69224 Equiv Himp E_WhileLoop constr
R69329:69338 Equiv Himp E_WhileEnd constr
R69329:69338 Equiv Himp E_WhileEnd constr
R69381:69384 Equiv <> <> mod
def 70238:70244 <> stequiv
R70257:70261 Imp <> state def
R70286:70287 SfLib <> id ind
R70296:70298 Coq.Init.Logic <> :type_scope:x_'='_x not
R70291:70293 Equiv <> st1 var
R70295:70295 Equiv <> X var
R70299:70301 Equiv <> st2 var
R70303:70303 Equiv <> X var
R70335:70341 Equiv <> stequiv def
not 70317 <> ::x_'~'_x
prf 70614:70625 <> stequiv_refl
R70642:70646 Imp <> state def
R70655:70657 Equiv <> ::x_'~'_x not
R70653:70654 Equiv <> st var
R70658:70659 Equiv <> st var
R70696:70702 Equiv <> stequiv def
prf 70803:70813 <> stequiv_sym
R70835:70839 Imp <> state def
R70865:70867 Equiv <> ::x_'~'_x not
R70862:70864 Equiv <> st2 var
R70868:70870 Equiv <> st1 var
R70849:70851 Equiv <> ::x_'~'_x not
R70846:70848 Equiv <> st1 var
R70852:70854 Equiv <> st2 var
R70908:70914 Equiv <> stequiv def
prf 71031:71043 <> stequiv_trans
R71069:71073 Imp <> state def
R71115:71117 Equiv <> ::x_'~'_x not
R71112:71114 Equiv <> st1 var
R71118:71120 Equiv <> st3 var
R71099:71101 Equiv <> ::x_'~'_x not
R71096:71098 Equiv <> st2 var
R71102:71104 Equiv <> st3 var
R71083:71085 Equiv <> ::x_'~'_x not
R71080:71082 Equiv <> st1 var
R71086:71088 Equiv <> st2 var
R71159:71165 Equiv <> stequiv def
prf 71324:71337 <> stequiv_update
R71359:71363 Imp <> state def
R71395:71396 SfLib <> id ind
R71402:71404 Coq.Init.Datatypes <> nat ind
R71424:71426 Equiv <> ::x_'~'_x not
R71410:71415 Imp <> update def
R71423:71423 Equiv <> n var
R71421:71421 Equiv <> X var
R71417:71419 Equiv <> st1 var
R71427:71432 Imp <> update def
R71440:71440 Equiv <> n var
R71438:71438 Equiv <> X var
R71434:71436 Equiv <> st2 var
R71372:71374 Equiv <> ::x_'~'_x not
R71369:71371 Equiv <> st1 var
R71375:71377 Equiv <> st2 var
R71478:71484 Equiv <> stequiv def
R71504:71509 Imp <> update def
prf 71745:71757 <> stequiv_aeval
R71779:71783 Imp <> state def
R71815:71818 Imp <> aexp ind
R71833:71835 Coq.Init.Logic <> :type_scope:x_'='_x not
R71822:71826 Imp <> aeval def
R71832:71832 Equiv <> a var
R71828:71830 Equiv <> st1 var
R71836:71840 Imp <> aeval def
R71846:71846 Equiv <> a var
R71842:71844 Equiv <> st2 var
R71793:71795 Equiv <> ::x_'~'_x not
R71790:71792 Equiv <> st1 var
R71796:71798 Equiv <> st2 var
prf 72052:72064 <> stequiv_beval
R72086:72090 Imp <> state def
R72122:72125 Imp <> bexp ind
R72140:72142 Coq.Init.Logic <> :type_scope:x_'='_x not
R72129:72133 Imp <> beval def
R72139:72139 Equiv <> b var
R72135:72137 Equiv <> st1 var
R72143:72147 Imp <> beval def
R72153:72153 Equiv <> b var
R72149:72151 Equiv <> st2 var
R72100:72102 Equiv <> ::x_'~'_x not
R72097:72099 Equiv <> st1 var
R72103:72105 Equiv <> st2 var
R72284:72296 Equiv <> stequiv_aeval thm
R72284:72296 Equiv <> stequiv_aeval thm
R72284:72296 Equiv <> stequiv_aeval thm
R72284:72296 Equiv <> stequiv_aeval thm
R72354:72366 Equiv <> stequiv_aeval thm
R72354:72366 Equiv <> stequiv_aeval thm
R72354:72366 Equiv <> stequiv_aeval thm
R72354:72366 Equiv <> stequiv_aeval thm
prf 72688:72700 <> stequiv_ceval
R72721:72725 Imp <> state def
R72757:72759 Imp <> com ind
R72769:72773 Imp <> state def
R72806:72812 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R72825:72831 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R72865:72865 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R72820:72824 Imp <> state def
R72832:72832 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R72848:72853 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R72834:72836 Imp <> ::x_'/'_x_'||'_x not
R72840:72843 Imp <> ::x_'/'_x_'||'_x not
R72833:72833 Equiv <> c var
R72837:72839 Equiv <> st2 var
R72844:72847 Equiv <> st2' var
R72858:72860 Equiv <> ::x_'~'_x not
R72854:72857 Equiv <> st1' var
R72861:72864 Equiv <> st2' var
R72783:72785 Imp <> ::x_'/'_x_'||'_x not
R72789:72792 Imp <> ::x_'/'_x_'||'_x not
R72782:72782 Equiv <> c var
R72786:72788 Equiv <> st1 var
R72793:72796 Equiv <> st1' var
R72734:72736 Equiv <> ::x_'~'_x not
R72731:72733 Equiv <> st1 var
R72737:72739 Equiv <> st2 var
R73079:73084 Imp <> update def
R73079:73084 Imp <> update def
R73156:73168 Equiv <> stequiv_aeval thm
R73156:73168 Equiv <> stequiv_aeval thm
R73197:73210 Equiv <> stequiv_update thm
R73197:73210 Equiv <> stequiv_update thm
R73388:73392 Imp <> E_Seq constr
R73388:73392 Imp <> E_Seq constr
R73543:73550 Imp <> E_IfTrue constr
R73543:73550 Imp <> E_IfTrue constr
R73584:73596 Equiv <> stequiv_beval thm
R73584:73596 Equiv <> stequiv_beval thm
R73747:73755 Imp <> E_IfFalse constr
R73747:73755 Imp <> E_IfFalse constr
R73788:73800 Equiv <> stequiv_beval thm
R73788:73800 Equiv <> stequiv_beval thm
R73900:73909 Imp <> E_WhileEnd constr
R73900:73909 Imp <> E_WhileEnd constr
R73942:73954 Equiv <> stequiv_beval thm
R73942:73954 Equiv <> stequiv_beval thm
R74158:74168 Imp <> E_WhileLoop constr
R74158:74168 Imp <> E_WhileLoop constr
R74219:74231 Equiv <> stequiv_beval thm
R74219:74231 Equiv <> stequiv_beval thm
ind 74701:74706 <> ceval'
constr 74747:74753 <> E_equiv
R74726:74730 Imp <> state def
R74717:74721 Imp <> state def
R74710:74712 Imp <> com ind
R74875:74880 Equiv <> ceval' ind
R74824:74826 Equiv <> ::x_'/'_x_'||'''_x not
R74829:74833 Equiv <> ::x_'/'_x_'||'''_x not
R74823:74823 Equiv <> c var
R74827:74828 Equiv <> st var
R74834:74837 Equiv <> st'' var
R74808:74810 Equiv <> ::x_'~'_x not
R74805:74807 Equiv <> st' var
R74811:74814 Equiv <> st'' var
R74784:74786 Imp <> ::x_'/'_x_'||'_x not
R74789:74792 Imp <> ::x_'/'_x_'||'_x not
R74783:74783 Equiv <> c var
R74787:74788 Equiv <> st var
R74793:74795 Equiv <> st' var
R74875:74880 Equiv <> ceval' ind
not 74849 <> ::x_'/'_x_'||'''_x
def 74970:74976 <> cequiv'
R74987:74989 Imp <> com ind
R75021:75025 Imp <> state def
R75033:75033 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R75049:75055 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R75071:75071 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R75036:75038 Equiv <> ::x_'/'_x_'||'''_x not
R75041:75045 Equiv <> ::x_'/'_x_'||'''_x not
R75034:75035 Equiv <> c1 var
R75039:75040 Equiv <> st var
R75046:75048 Equiv <> st' var
R75058:75060 Equiv <> ::x_'/'_x_'||'''_x not
R75063:75067 Equiv <> ::x_'/'_x_'||'''_x not
R75056:75057 Equiv <> c2 var
R75061:75062 Equiv <> st var
R75068:75070 Equiv <> st' var
prf 75243:75257 <> cequiv__cequiv'
R75276:75278 Imp <> com ind
R75300:75306 Equiv <> cequiv' def
R75311:75312 Equiv <> c2 var
R75308:75309 Equiv <> c1 var
R75284:75289 Equiv <> cequiv def
R75294:75295 Equiv <> c2 var
R75291:75292 Equiv <> c1 var
R75332:75337 Equiv <> cequiv def
R75340:75346 Equiv <> cequiv' def
R75398:75404 Equiv <> E_equiv constr
R75398:75404 Equiv <> E_equiv constr
R75500:75506 Equiv <> E_equiv constr
R75500:75506 Equiv <> E_equiv constr
def 75729:75748 <> identity_assignment'
R75754:75760 Equiv <> cequiv' def
R75769:75773 Imp <> ::x_'::='_x not
R75768:75768 Imp <> X def
R75774:75776 Imp <> AId constr
R75778:75778 Imp <> X def
R75762:75765 Imp <> ::'SKIP' not
R75800:75806 Equiv <> cequiv' def
R75935:75940 Imp <> update def
R75955:75955 Imp <> X def
R75947:75947 Imp <> X def
R75921:75927 Equiv <> E_equiv constr
R75935:75940 Imp <> update def
R75955:75955 Imp <> X def
R75947:75947 Imp <> X def
R75921:75927 Equiv <> E_equiv constr
R76000:76012 Equiv <> stequiv_trans thm
R76000:76012 Equiv <> stequiv_trans thm
R76040:76046 Equiv <> stequiv def
R76063:76073 Imp <> update_same thm
R76063:76073 Imp <> update_same thm
R76232:76238 Equiv <> E_equiv constr
R76232:76238 Equiv <> E_equiv constr
R76296:76301 Imp <> update def
R76312:76312 Imp <> X def
R76306:76306 Imp <> X def
R76276:76288 Equiv <> stequiv_trans thm
R76296:76301 Imp <> update def
R76312:76312 Imp <> X def
R76306:76306 Imp <> X def
R76276:76288 Equiv <> stequiv_trans thm
R76332:76338 Equiv <> stequiv def
R76357:76367 Imp <> update_same thm
R76357:76367 Imp <> update_same thm
prf 77690:77720 <> swap_noninterfering_assignments
R77824:77829 Equiv <> cequiv def
R77872:77873 Imp <> ::x_';'_x not
R77865:77869 Imp <> ::x_'::='_x not
R77863:77864 Equiv <> l2 var
R77870:77871 Equiv <> a2 var
R77876:77880 Imp <> ::x_'::='_x not
R77874:77875 Equiv <> l1 var
R77881:77882 Equiv <> a1 var
R77845:77846 Imp <> ::x_';'_x not
R77838:77842 Imp <> ::x_'::='_x not
R77836:77837 Equiv <> l1 var
R77843:77844 Equiv <> a1 var
R77849:77853 Imp <> ::x_'::='_x not
R77847:77848 Equiv <> l2 var
R77854:77855 Equiv <> a2 var
R77792:77811 Equiv <> var_not_used_in_aexp ind
R77816:77817 Equiv <> a1 var
R77813:77814 Equiv <> l2 var
R77760:77779 Equiv <> var_not_used_in_aexp ind
R77784:77785 Equiv <> a2 var
R77781:77782 Equiv <> l1 var
R77747:77750 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R77745:77746 Equiv <> l1 var
R77751:77752 Equiv <> l2 var
R78006:78011 Equiv <> cequiv def
R78042:78047 Imp <> update def
R78056:78060 Imp <> aeval def
R78042:78047 Imp <> update def
R78056:78060 Imp <> aeval def
R78091:78096 Imp <> update def
R78105:78109 Imp <> aeval def
R78091:78096 Imp <> update def
R78105:78109 Imp <> aeval def
R78149:78151 Coq.Init.Logic <> :type_scope:x_'='_x not
R78138:78142 Imp <> aeval def
R78152:78156 Imp <> aeval def
R78149:78151 Coq.Init.Logic <> :type_scope:x_'='_x not
R78138:78142 Imp <> aeval def
R78152:78156 Imp <> aeval def
R78202:78216 Equiv <> aeval_weakening thm
R78202:78216 Equiv <> aeval_weakening thm
R78273:78275 Coq.Init.Logic <> :type_scope:x_'='_x not
R78262:78266 Imp <> aeval def
R78276:78280 Imp <> aeval def
R78273:78275 Coq.Init.Logic <> :type_scope:x_'='_x not
R78262:78266 Imp <> aeval def
R78276:78280 Imp <> aeval def
R78325:78339 Equiv <> aeval_weakening thm
R78325:78339 Equiv <> aeval_weakening thm
R78385:78385 Coq.Init.Logic <> :type_scope:x_'='_x not
R78414:78428 Coq.Init.Logic <> :type_scope:x_'='_x not
R78457:78457 Coq.Init.Logic <> :type_scope:x_'='_x not
R78386:78391 Imp <> update def
R78401:78405 Imp <> aeval def
R78429:78434 Imp <> update def
R78444:78448 Imp <> aeval def
R78385:78385 Coq.Init.Logic <> :type_scope:x_'='_x not
R78414:78428 Coq.Init.Logic <> :type_scope:x_'='_x not
R78457:78457 Coq.Init.Logic <> :type_scope:x_'='_x not
R78386:78391 Imp <> update def
R78401:78405 Imp <> aeval def
R78429:78434 Imp <> update def
R78444:78448 Imp <> aeval def
R78519:78543 Equiv <> functional_extensionality prfax
R78519:78543 Equiv <> functional_extensionality prfax
R78583:78596 Imp <> update_permute thm
R78583:78596 Imp <> update_permute thm
R78605:78623 SfLib <> not_eq_beq_id_false thm
R78605:78623 SfLib <> not_eq_beq_id_false thm
R78732:78736 Imp <> E_Seq constr
R78732:78736 Imp <> E_Seq constr
R78768:78772 Imp <> E_Ass constr
R78768:78772 Imp <> E_Ass constr
R78816:78820 Imp <> E_Ass constr
R78816:78820 Imp <> E_Ass constr
R78913:78917 Imp <> E_Seq constr
R78913:78917 Imp <> E_Seq constr
R78950:78954 Imp <> E_Ass constr
R78950:78954 Imp <> E_Ass constr
R79001:79005 Imp <> E_Ass constr
R79001:79005 Imp <> E_Ass constr
